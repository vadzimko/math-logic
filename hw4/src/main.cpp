#include <utility>

#include <iostream>
#include <fstream>
#include <vector>
#include <set>
#include <map>
#include <string>
#include <algorithm>
#include <unordered_map>
#include <stdio.h>
#include <ctime>
#include <ratio>
#include <chrono>

using namespace std;

ifstream fin("output.txt");
ofstream fout("ans.txt");

namespace precalc {
    const string A_B_IMPL[] = {
            "(->,B,(->,A,B))",
            "B",
            "(->,A,B)",
    };

    const string notA_B_IMPL[] = {
            "(->,B,(->,A,B))",
            "B",
            "(->,A,B)",
    };

    const string notA_notB_IMPL[] = {
            "(!A)",
            "(->,A,(->,(!B),A))",
            "(->,(->,(!A),(->,(!B),(!A))),(->,A,(->,(!A),(->,(!B),(!A)))))",
            "(->,(!A),(->,(!B),(!A)))",
            "(->,A,(->,(!A),(->,(!B),(!A))))",
            "(->,(!A),(->,A,(!A)))",
            "(->,A,(!A))",
            "(->,(->,A,(!A)),(->,(->,A,(->,(!A),(->,(!B),(!A)))),(->,A,(->,(!B),(!A)))))",
            "(->,(->,A,(->,(!A),(->,(!B),(!A)))),(->,A,(->,(!B),(!A))))",
            "(->,A,(->,(!B),(!A)))",
            "(->,(->,(->,(!B),A),(->,(->,(!B),(!A)),(!(!B)))),(->,A,(->,(->,(!B),A),(->,(->,(!B),(!A)),(!(!B))))))",
            "(->,(->,(!B),A),(->,(->,(!B),(!A)),(!(!B))))",
            "(->,A,(->,(->,(!B),A),(->,(->,(!B),(!A)),(!(!B)))))",
            "(->,(->,A,(->,(!B),A)),(->,(->,A,(->,(->,(!B),A),(->,(->,(!B),(!A)),(!(!B))))),(->,A,(->,(->,(!B),(!A)),(!(!B))))))",
            "(->,(->,A,(->,(->,(!B),A),(->,(->,(!B),(!A)),(!(!B))))),(->,A,(->,(->,(!B),(!A)),(!(!B)))))",
            "(->,A,(->,(->,(!B),(!A)),(!(!B))))",
            "(->,(->,A,(->,(!B),(!A))),(->,(->,A,(->,(->,(!B),(!A)),(!(!B)))),(->,A,(!(!B)))))",
            "(->,(->,A,(->,(->,(!B),(!A)),(!(!B)))),(->,A,(!(!B))))",
            "(->,A,(!(!B)))",
            "(->,(->,(!(!B)),B),(->,A,(->,(!(!B)),B)))",
            "(->,(!(!B)),B)",
            "(->,A,(->,(!(!B)),B))",
            "(->,(->,A,(!(!B))),(->,(->,A,(->,(!(!B)),B)),(->,A,B)))",
            "(->,(->,A,(->,(!(!B)),B)),(->,A,B))",
            "(->,A,B)",
    };

    const string A_notB_notIMPL[] = {
            "A",
            "(!B)",
            "(->,(->,A,B),(->,(->,(->,A,B),(->,A,B)),(->,A,B)))",
            "(->,(->,A,B),(->,(->,A,B),(->,A,B)))",
            "(->,(->,(->,A,B),(->,(->,A,B),(->,A,B))),(->,(->,(->,A,B),(->,(->,(->,A,B),(->,A,B)),(->,A,B))),(->,(->,A,B),(->,A,B))))",
            "(->,(->,(->,A,B),(->,(->,(->,A,B),(->,A,B)),(->,A,B))),(->,(->,A,B),(->,A,B)))",
            "(->,(->,A,B),(->,A,B))",
            "(->,A,(->,(->,A,B),A))",
            "(->,(->,A,B),A)",
            "(->,(->,(->,A,B),A),(->,(->,(->,A,B),(->,A,B)),(->,(->,A,B),B)))",
            "(->,(->,(->,A,B),(->,A,B)),(->,(->,A,B),B))",
            "(->,(->,A,B),B)",
            "(->,(->,(!B),(->,(->,A,B),(!B))),(->,(->,(->,A,B),B),(->,(!B),(->,(->,A,B),(!B)))))",
            "(->,(!B),(->,(->,A,B),(!B)))",
            "(->,(->,(->,A,B),B),(->,(!B),(->,(->,A,B),(!B))))",
            "(->,(->,(->,A,B),B),(->,(!B),(->,(->,A,B),B)))",
            "(->,(->,(->,(->,(->,A,B),B),(->,(->,(->,A,B),(!B)),(!(->,A,B)))),(->,(!B),(->,(->,(->,A,B),B),(->,(->,(->,A,B),(!B)),(!(->,A,B)))))),(->,(->,(->,A,B),B),(->,(->,(->,(->,A,B),B),(->,(->,(->,A,B),(!B)),(!(->,A,B)))),(->,(!B),(->,(->,(->,A,B),B),(->,(->,(->,A,B),(!B)),(!(->,A,B))))))))",
            "(->,(->,(->,(->,A,B),B),(->,(->,(->,A,B),(!B)),(!(->,A,B)))),(->,(!B),(->,(->,(->,A,B),B),(->,(->,(->,A,B),(!B)),(!(->,A,B))))))",
            "(->,(->,(->,A,B),B),(->,(->,(->,(->,A,B),B),(->,(->,(->,A,B),(!B)),(!(->,A,B)))),(->,(!B),(->,(->,(->,A,B),B),(->,(->,(->,A,B),(!B)),(!(->,A,B)))))))",
            "(->,(->,(->,(->,A,B),B),(->,(->,(->,A,B),(!B)),(!(->,A,B)))),(->,(->,(->,A,B),B),(->,(->,(->,A,B),B),(->,(->,(->,A,B),(!B)),(!(->,A,B))))))",
            "(->,(->,(->,A,B),B),(->,(->,(->,A,B),(!B)),(!(->,A,B))))",
            "(->,(->,(->,A,B),B),(->,(->,(->,A,B),B),(->,(->,(->,A,B),(!B)),(!(->,A,B)))))",
            "(->,(->,(->,(->,A,B),B),(->,(->,(->,A,B),B),(->,(->,(->,A,B),(!B)),(!(->,A,B))))),(->,(->,(->,(->,A,B),B),(->,(->,(->,(->,A,B),B),(->,(->,(->,A,B),(!B)),(!(->,A,B)))),(->,(!B),(->,(->,(->,A,B),B),(->,(->,(->,A,B),(!B)),(!(->,A,B))))))),(->,(->,(->,A,B),B),(->,(!B),(->,(->,(->,A,B),B),(->,(->,(->,A,B),(!B)),(!(->,A,B))))))))",
            "(->,(->,(->,(->,A,B),B),(->,(->,(->,(->,A,B),B),(->,(->,(->,A,B),(!B)),(!(->,A,B)))),(->,(!B),(->,(->,(->,A,B),B),(->,(->,(->,A,B),(!B)),(!(->,A,B))))))),(->,(->,(->,A,B),B),(->,(!B),(->,(->,(->,A,B),B),(->,(->,(->,A,B),(!B)),(!(->,A,B)))))))",
            "(->,(->,(->,A,B),B),(->,(!B),(->,(->,(->,A,B),B),(->,(->,(->,A,B),(!B)),(!(->,A,B))))))",
            "(->,(->,(->,(!B),(->,(->,A,B),B)),(->,(->,(!B),(->,(->,(->,A,B),B),(->,(->,(->,A,B),(!B)),(!(->,A,B))))),(->,(!B),(->,(->,(->,A,B),(!B)),(!(->,A,B)))))),(->,(->,(->,A,B),B),(->,(->,(!B),(->,(->,A,B),B)),(->,(->,(!B),(->,(->,(->,A,B),B),(->,(->,(->,A,B),(!B)),(!(->,A,B))))),(->,(!B),(->,(->,(->,A,B),(!B)),(!(->,A,B))))))))",
            "(->,(->,(!B),(->,(->,A,B),B)),(->,(->,(!B),(->,(->,(->,A,B),B),(->,(->,(->,A,B),(!B)),(!(->,A,B))))),(->,(!B),(->,(->,(->,A,B),(!B)),(!(->,A,B))))))",
            "(->,(->,(->,A,B),B),(->,(->,(!B),(->,(->,A,B),B)),(->,(->,(!B),(->,(->,(->,A,B),B),(->,(->,(->,A,B),(!B)),(!(->,A,B))))),(->,(!B),(->,(->,(->,A,B),(!B)),(!(->,A,B)))))))",
            "(->,(->,(->,(->,A,B),B),(->,(!B),(->,(->,A,B),B))),(->,(->,(->,(->,A,B),B),(->,(->,(!B),(->,(->,A,B),B)),(->,(->,(!B),(->,(->,(->,A,B),B),(->,(->,(->,A,B),(!B)),(!(->,A,B))))),(->,(!B),(->,(->,(->,A,B),(!B)),(!(->,A,B))))))),(->,(->,(->,A,B),B),(->,(->,(!B),(->,(->,(->,A,B),B),(->,(->,(->,A,B),(!B)),(!(->,A,B))))),(->,(!B),(->,(->,(->,A,B),(!B)),(!(->,A,B))))))))",
            "(->,(->,(->,(->,A,B),B),(->,(->,(!B),(->,(->,A,B),B)),(->,(->,(!B),(->,(->,(->,A,B),B),(->,(->,(->,A,B),(!B)),(!(->,A,B))))),(->,(!B),(->,(->,(->,A,B),(!B)),(!(->,A,B))))))),(->,(->,(->,A,B),B),(->,(->,(!B),(->,(->,(->,A,B),B),(->,(->,(->,A,B),(!B)),(!(->,A,B))))),(->,(!B),(->,(->,(->,A,B),(!B)),(!(->,A,B)))))))",
            "(->,(->,(->,A,B),B),(->,(->,(!B),(->,(->,(->,A,B),B),(->,(->,(->,A,B),(!B)),(!(->,A,B))))),(->,(!B),(->,(->,(->,A,B),(!B)),(!(->,A,B))))))",
            "(->,(->,(->,(->,A,B),B),(->,(!B),(->,(->,(->,A,B),B),(->,(->,(->,A,B),(!B)),(!(->,A,B)))))),(->,(->,(->,(->,A,B),B),(->,(->,(!B),(->,(->,(->,A,B),B),(->,(->,(->,A,B),(!B)),(!(->,A,B))))),(->,(!B),(->,(->,(->,A,B),(!B)),(!(->,A,B)))))),(->,(->,(->,A,B),B),(->,(!B),(->,(->,(->,A,B),(!B)),(!(->,A,B)))))))",
            "(->,(->,(->,(->,A,B),B),(->,(->,(!B),(->,(->,(->,A,B),B),(->,(->,(->,A,B),(!B)),(!(->,A,B))))),(->,(!B),(->,(->,(->,A,B),(!B)),(!(->,A,B)))))),(->,(->,(->,A,B),B),(->,(!B),(->,(->,(->,A,B),(!B)),(!(->,A,B))))))",
            "(->,(->,(->,A,B),B),(->,(!B),(->,(->,(->,A,B),(!B)),(!(->,A,B)))))",
            "(->,(->,(->,(!B),(->,(->,A,B),(!B))),(->,(->,(!B),(->,(->,(->,A,B),(!B)),(!(->,A,B)))),(->,(!B),(!(->,A,B))))),(->,(->,(->,A,B),B),(->,(->,(!B),(->,(->,A,B),(!B))),(->,(->,(!B),(->,(->,(->,A,B),(!B)),(!(->,A,B)))),(->,(!B),(!(->,A,B)))))))",
            "(->,(->,(!B),(->,(->,A,B),(!B))),(->,(->,(!B),(->,(->,(->,A,B),(!B)),(!(->,A,B)))),(->,(!B),(!(->,A,B)))))",
            "(->,(->,(->,A,B),B),(->,(->,(!B),(->,(->,A,B),(!B))),(->,(->,(!B),(->,(->,(->,A,B),(!B)),(!(->,A,B)))),(->,(!B),(!(->,A,B))))))",
            "(->,(->,(->,(->,A,B),B),(->,(!B),(->,(->,A,B),(!B)))),(->,(->,(->,(->,A,B),B),(->,(->,(!B),(->,(->,A,B),(!B))),(->,(->,(!B),(->,(->,(->,A,B),(!B)),(!(->,A,B)))),(->,(!B),(!(->,A,B)))))),(->,(->,(->,A,B),B),(->,(->,(!B),(->,(->,(->,A,B),(!B)),(!(->,A,B)))),(->,(!B),(!(->,A,B)))))))",
            "(->,(->,(->,(->,A,B),B),(->,(->,(!B),(->,(->,A,B),(!B))),(->,(->,(!B),(->,(->,(->,A,B),(!B)),(!(->,A,B)))),(->,(!B),(!(->,A,B)))))),(->,(->,(->,A,B),B),(->,(->,(!B),(->,(->,(->,A,B),(!B)),(!(->,A,B)))),(->,(!B),(!(->,A,B))))))",
            "(->,(->,(->,A,B),B),(->,(->,(!B),(->,(->,(->,A,B),(!B)),(!(->,A,B)))),(->,(!B),(!(->,A,B)))))",
            "(->,(->,(->,(->,A,B),B),(->,(!B),(->,(->,(->,A,B),(!B)),(!(->,A,B))))),(->,(->,(->,(->,A,B),B),(->,(->,(!B),(->,(->,(->,A,B),(!B)),(!(->,A,B)))),(->,(!B),(!(->,A,B))))),(->,(->,(->,A,B),B),(->,(!B),(!(->,A,B))))))",
            "(->,(->,(->,(->,A,B),B),(->,(->,(!B),(->,(->,(->,A,B),(!B)),(!(->,A,B)))),(->,(!B),(!(->,A,B))))),(->,(->,(->,A,B),B),(->,(!B),(!(->,A,B)))))",
            "(->,(->,(->,A,B),B),(->,(!B),(!(->,A,B))))",
            "(->,(!B),(!(->,A,B)))",
            "(!(->,A,B))",
    };

    const string A_B_AND[] = {
            "A",
            "B",
            "(->,A,(->,B,(&,A,B)))",
            "(->,B,(&,A,B))",
            "(&,A,B)",
    };

    const string A_notB_notAND[] = {
            "(!B)",
            "(->,(&,A,B),B)",
            "(->,(!B),(->,(&,A,B),(!B)))",
            "(->,(&,A,B),(!B))",
            "(->,(->,(&,A,B),B),(->,(->,(&,A,B),(!B)),(!(&,A,B))))",
            "(->,(->,(&,A,B),(!B)),(!(&,A,B)))",
            "(!(&,A,B))",
    };

    const string notA_B_notAND[] = {
            "(!A)",
            "(->,(&,A,B),A)",
            "(->,(!A),(->,(&,A,B),(!A)))",
            "(->,(&,A,B),(!A))",
            "(->,(->,(&,A,B),A),(->,(->,(&,A,B),(!A)),(!(&,A,B))))",
            "(->,(->,(&,A,B),(!A)),(!(&,A,B)))",
            "(!(&,A,B))",
    };

    const string notA_notB_notAND[] = {
            "(!A)",
            "(->,(&,A,B),A)",
            "(->,(!A),(->,(&,A,B),(!A)))",
            "(->,(&,A,B),(!A))",
            "(->,(->,(&,A,B),A),(->,(->,(&,A,B),(!A)),(!(&,A,B))))",
            "(->,(->,(&,A,B),(!A)),(!(&,A,B)))",
            "(!(&,A,B))",
    };

    const string A_B_OR[] = {
            "(->,A,(|,A,B))",
            "A",
            "(|,A,B)",
    };

    const string notA_B_OR[] = {
            "(->,B,(|,A,B))",
            "B",
            "(|,A,B)",
    };

    const string A_notB_OR[] = {
            "(->,A,(|,A,B))",
            "A",
            "(|,A,B)",
    };

    const string notA_notB_notOR[] = {
            "(!A)",
            "(!B)",
            "(->,(->,(!A),(->,(!B),(!A))),(->,A,(->,(!A),(->,(!B),(!A)))))",
            "(->,(!A),(->,(!B),(!A)))",
            "(->,A,(->,(!A),(->,(!B),(!A))))",
            "(->,(!A),(->,A,(!A)))",
            "(->,A,(!A))",
            "(->,(->,A,(!A)),(->,(->,A,(->,(!A),(->,(!B),(!A)))),(->,A,(->,(!B),(!A)))))",
            "(->,(->,A,(->,(!A),(->,(!B),(!A)))),(->,A,(->,(!B),(!A))))",
            "(->,A,(->,(!B),(!A)))",
            "(->,A,(->,(!B),A))",
            "(->,(->,(->,(!B),A),(->,(->,(!B),(!A)),(!(!B)))),(->,A,(->,(->,(!B),A),(->,(->,(!B),(!A)),(!(!B))))))",
            "(->,(->,(!B),A),(->,(->,(!B),(!A)),(!(!B))))",
            "(->,A,(->,(->,(!B),A),(->,(->,(!B),(!A)),(!(!B)))))",
            "(->,(->,A,(->,(!B),A)),(->,(->,A,(->,(->,(!B),A),(->,(->,(!B),(!A)),(!(!B))))),(->,A,(->,(->,(!B),(!A)),(!(!B))))))",
            "(->,(->,A,(->,(->,(!B),A),(->,(->,(!B),(!A)),(!(!B))))),(->,A,(->,(->,(!B),(!A)),(!(!B)))))",
            "(->,A,(->,(->,(!B),(!A)),(!(!B))))",
            "(->,(->,A,(->,(!B),(!A))),(->,(->,A,(->,(->,(!B),(!A)),(!(!B)))),(->,A,(!(!B)))))",
            "(->,(->,A,(->,(->,(!B),(!A)),(!(!B)))),(->,A,(!(!B))))",
            "(->,A,(!(!B)))",
            "(->,(->,(!(!B)),B),(->,A,(->,(!(!B)),B)))",
            "(->,(!(!B)),B)",
            "(->,A,(->,(!(!B)),B))",
            "(->,(->,A,(!(!B))),(->,(->,A,(->,(!(!B)),B)),(->,A,B)))",
            "(->,(->,A,(->,(!(!B)),B)),(->,A,B))",
            "(->,A,B)",
            "(->,B,(->,(->,B,B),B))",
            "(->,B,(->,B,B))",
            "(->,(->,B,(->,B,B)),(->,(->,B,(->,(->,B,B),B)),(->,B,B)))",
            "(->,(->,B,(->,(->,B,B),B)),(->,B,B))",
            "(->,B,B)",
            "(->,(->,A,B),(->,(->,B,B),(->,(|,A,B),B)))",
            "(->,(->,B,B),(->,(|,A,B),B))",
            "(->,(|,A,B),B)",
            "(->,(!B),(->,(|,A,B),(!B)))",
            "(->,(|,A,B),(!B))",
            "(->,(->,(|,A,B),B),(->,(->,(|,A,B),(!B)),(!(|,A,B))))",
            "(->,(->,(|,A,B),(!B)),(!(|,A,B)))",
            "(!(|,A,B))",
    };

    const string exclusion[] = {
            "(->,A,B)",
            "(->,(!A),B)",
            "(->,(->,A,B),(->,(->,(!A),B),(->,(|,A,(!A)),B)))",
            "(->,(->,(!A),B),(->,(|,A,(!A)),B))",
            "(->,(|,A,(!A)),B)",
            "(->,A,(|,A,(!A)))",
            "(->,(!A),(|,A,(!A)))",
            "(->,(->,A,(|,A,(!A))),(->,(->,A,(!(|,A,(!A)))),(!A)))",
            "(->,(->,(->,A,(|,A,(!A))),(->,(->,A,(!(|,A,(!A)))),(!A))),(->,(->,A,(|,A,(!A))),(->,(->,A,(|,A,(!A))),(->,(->,A,(!(|,A,(!A)))),(!A)))))",
            "(->,(->,A,(|,A,(!A))),(->,(->,A,(|,A,(!A))),(->,(->,A,(!(|,A,(!A)))),(!A))))",
            "(->,(->,(->,A,(|,A,(!A))),(->,(->,A,(!(|,A,(!A)))),(!A))),(->,(!(|,A,(!A))),(->,(->,A,(|,A,(!A))),(->,(->,A,(!(|,A,(!A)))),(!A)))))",
            "(->,(->,(->,(->,A,(|,A,(!A))),(->,(->,A,(!(|,A,(!A)))),(!A))),(->,(!(|,A,(!A))),(->,(->,A,(|,A,(!A))),(->,(->,A,(!(|,A,(!A)))),(!A))))),(->,(->,A,(|,A,(!A))),(->,(->,(->,A,(|,A,(!A))),(->,(->,A,(!(|,A,(!A)))),(!A))),(->,(!(|,A,(!A))),(->,(->,A,(|,A,(!A))),(->,(->,A,(!(|,A,(!A)))),(!A)))))))",
            "(->,(->,A,(|,A,(!A))),(->,(->,(->,A,(|,A,(!A))),(->,(->,A,(!(|,A,(!A)))),(!A))),(->,(!(|,A,(!A))),(->,(->,A,(|,A,(!A))),(->,(->,A,(!(|,A,(!A)))),(!A))))))",
            "(->,(->,(->,A,(|,A,(!A))),(->,(->,A,(|,A,(!A))),(->,(->,A,(!(|,A,(!A)))),(!A)))),(->,(->,(->,A,(|,A,(!A))),(->,(->,(->,A,(|,A,(!A))),(->,(->,A,(!(|,A,(!A)))),(!A))),(->,(!(|,A,(!A))),(->,(->,A,(|,A,(!A))),(->,(->,A,(!(|,A,(!A)))),(!A)))))),(->,(->,A,(|,A,(!A))),(->,(!(|,A,(!A))),(->,(->,A,(|,A,(!A))),(->,(->,A,(!(|,A,(!A)))),(!A)))))))",
            "(->,(->,(->,A,(|,A,(!A))),(->,(->,(->,A,(|,A,(!A))),(->,(->,A,(!(|,A,(!A)))),(!A))),(->,(!(|,A,(!A))),(->,(->,A,(|,A,(!A))),(->,(->,A,(!(|,A,(!A)))),(!A)))))),(->,(->,A,(|,A,(!A))),(->,(!(|,A,(!A))),(->,(->,A,(|,A,(!A))),(->,(->,A,(!(|,A,(!A)))),(!A))))))",
            "(->,(->,A,(|,A,(!A))),(->,(!(|,A,(!A))),(->,(->,A,(|,A,(!A))),(->,(->,A,(!(|,A,(!A)))),(!A)))))",
            "(->,(->,A,(|,A,(!A))),(->,(!(|,A,(!A))),(->,A,(|,A,(!A)))))",
            "(->,(->,(!(|,A,(!A))),(->,A,(|,A,(!A)))),(->,(->,(!(|,A,(!A))),(->,(->,A,(|,A,(!A))),(->,(->,A,(!(|,A,(!A)))),(!A)))),(->,(!(|,A,(!A))),(->,(->,A,(!(|,A,(!A)))),(!A)))))",
            "(->,(->,(->,(!(|,A,(!A))),(->,A,(|,A,(!A)))),(->,(->,(!(|,A,(!A))),(->,(->,A,(|,A,(!A))),(->,(->,A,(!(|,A,(!A)))),(!A)))),(->,(!(|,A,(!A))),(->,(->,A,(!(|,A,(!A)))),(!A))))),(->,(->,A,(|,A,(!A))),(->,(->,(!(|,A,(!A))),(->,A,(|,A,(!A)))),(->,(->,(!(|,A,(!A))),(->,(->,A,(|,A,(!A))),(->,(->,A,(!(|,A,(!A)))),(!A)))),(->,(!(|,A,(!A))),(->,(->,A,(!(|,A,(!A)))),(!A)))))))",
            "(->,(->,A,(|,A,(!A))),(->,(->,(!(|,A,(!A))),(->,A,(|,A,(!A)))),(->,(->,(!(|,A,(!A))),(->,(->,A,(|,A,(!A))),(->,(->,A,(!(|,A,(!A)))),(!A)))),(->,(!(|,A,(!A))),(->,(->,A,(!(|,A,(!A)))),(!A))))))",
            "(->,(->,(->,A,(|,A,(!A))),(->,(!(|,A,(!A))),(->,A,(|,A,(!A))))),(->,(->,(->,A,(|,A,(!A))),(->,(->,(!(|,A,(!A))),(->,A,(|,A,(!A)))),(->,(->,(!(|,A,(!A))),(->,(->,A,(|,A,(!A))),(->,(->,A,(!(|,A,(!A)))),(!A)))),(->,(!(|,A,(!A))),(->,(->,A,(!(|,A,(!A)))),(!A)))))),(->,(->,A,(|,A,(!A))),(->,(->,(!(|,A,(!A))),(->,(->,A,(|,A,(!A))),(->,(->,A,(!(|,A,(!A)))),(!A)))),(->,(!(|,A,(!A))),(->,(->,A,(!(|,A,(!A)))),(!A)))))))",
            "(->,(->,(->,A,(|,A,(!A))),(->,(->,(!(|,A,(!A))),(->,A,(|,A,(!A)))),(->,(->,(!(|,A,(!A))),(->,(->,A,(|,A,(!A))),(->,(->,A,(!(|,A,(!A)))),(!A)))),(->,(!(|,A,(!A))),(->,(->,A,(!(|,A,(!A)))),(!A)))))),(->,(->,A,(|,A,(!A))),(->,(->,(!(|,A,(!A))),(->,(->,A,(|,A,(!A))),(->,(->,A,(!(|,A,(!A)))),(!A)))),(->,(!(|,A,(!A))),(->,(->,A,(!(|,A,(!A)))),(!A))))))",
            "(->,(->,A,(|,A,(!A))),(->,(->,(!(|,A,(!A))),(->,(->,A,(|,A,(!A))),(->,(->,A,(!(|,A,(!A)))),(!A)))),(->,(!(|,A,(!A))),(->,(->,A,(!(|,A,(!A)))),(!A)))))",
            "(->,(->,(->,A,(|,A,(!A))),(->,(!(|,A,(!A))),(->,(->,A,(|,A,(!A))),(->,(->,A,(!(|,A,(!A)))),(!A))))),(->,(->,(->,A,(|,A,(!A))),(->,(->,(!(|,A,(!A))),(->,(->,A,(|,A,(!A))),(->,(->,A,(!(|,A,(!A)))),(!A)))),(->,(!(|,A,(!A))),(->,(->,A,(!(|,A,(!A)))),(!A))))),(->,(->,A,(|,A,(!A))),(->,(!(|,A,(!A))),(->,(->,A,(!(|,A,(!A)))),(!A))))))",
            "(->,(->,(->,A,(|,A,(!A))),(->,(->,(!(|,A,(!A))),(->,(->,A,(|,A,(!A))),(->,(->,A,(!(|,A,(!A)))),(!A)))),(->,(!(|,A,(!A))),(->,(->,A,(!(|,A,(!A)))),(!A))))),(->,(->,A,(|,A,(!A))),(->,(!(|,A,(!A))),(->,(->,A,(!(|,A,(!A)))),(!A)))))",
            "(->,(->,A,(|,A,(!A))),(->,(!(|,A,(!A))),(->,(->,A,(!(|,A,(!A)))),(!A))))",
            "(->,(!(|,A,(!A))),(->,A,(!(|,A,(!A)))))",
            "(->,(->,(!(|,A,(!A))),(->,A,(!(|,A,(!A))))),(->,(->,A,(|,A,(!A))),(->,(!(|,A,(!A))),(->,A,(!(|,A,(!A)))))))",
            "(->,(->,A,(|,A,(!A))),(->,(!(|,A,(!A))),(->,A,(!(|,A,(!A))))))",
            "(->,(->,(!(|,A,(!A))),(->,A,(!(|,A,(!A))))),(->,(->,(!(|,A,(!A))),(->,(->,A,(!(|,A,(!A)))),(!A))),(->,(!(|,A,(!A))),(!A))))",
            "(->,(->,(->,(!(|,A,(!A))),(->,A,(!(|,A,(!A))))),(->,(->,(!(|,A,(!A))),(->,(->,A,(!(|,A,(!A)))),(!A))),(->,(!(|,A,(!A))),(!A)))),(->,(->,A,(|,A,(!A))),(->,(->,(!(|,A,(!A))),(->,A,(!(|,A,(!A))))),(->,(->,(!(|,A,(!A))),(->,(->,A,(!(|,A,(!A)))),(!A))),(->,(!(|,A,(!A))),(!A))))))",
            "(->,(->,A,(|,A,(!A))),(->,(->,(!(|,A,(!A))),(->,A,(!(|,A,(!A))))),(->,(->,(!(|,A,(!A))),(->,(->,A,(!(|,A,(!A)))),(!A))),(->,(!(|,A,(!A))),(!A)))))",
            "(->,(->,(->,A,(|,A,(!A))),(->,(!(|,A,(!A))),(->,A,(!(|,A,(!A)))))),(->,(->,(->,A,(|,A,(!A))),(->,(->,(!(|,A,(!A))),(->,A,(!(|,A,(!A))))),(->,(->,(!(|,A,(!A))),(->,(->,A,(!(|,A,(!A)))),(!A))),(->,(!(|,A,(!A))),(!A))))),(->,(->,A,(|,A,(!A))),(->,(->,(!(|,A,(!A))),(->,(->,A,(!(|,A,(!A)))),(!A))),(->,(!(|,A,(!A))),(!A))))))",
            "(->,(->,(->,A,(|,A,(!A))),(->,(->,(!(|,A,(!A))),(->,A,(!(|,A,(!A))))),(->,(->,(!(|,A,(!A))),(->,(->,A,(!(|,A,(!A)))),(!A))),(->,(!(|,A,(!A))),(!A))))),(->,(->,A,(|,A,(!A))),(->,(->,(!(|,A,(!A))),(->,(->,A,(!(|,A,(!A)))),(!A))),(->,(!(|,A,(!A))),(!A)))))",
            "(->,(->,A,(|,A,(!A))),(->,(->,(!(|,A,(!A))),(->,(->,A,(!(|,A,(!A)))),(!A))),(->,(!(|,A,(!A))),(!A))))",
            "(->,(->,(->,A,(|,A,(!A))),(->,(!(|,A,(!A))),(->,(->,A,(!(|,A,(!A)))),(!A)))),(->,(->,(->,A,(|,A,(!A))),(->,(->,(!(|,A,(!A))),(->,(->,A,(!(|,A,(!A)))),(!A))),(->,(!(|,A,(!A))),(!A)))),(->,(->,A,(|,A,(!A))),(->,(!(|,A,(!A))),(!A)))))",
            "(->,(->,(->,A,(|,A,(!A))),(->,(->,(!(|,A,(!A))),(->,(->,A,(!(|,A,(!A)))),(!A))),(->,(!(|,A,(!A))),(!A)))),(->,(->,A,(|,A,(!A))),(->,(!(|,A,(!A))),(!A))))",
            "(->,(->,A,(|,A,(!A))),(->,(!(|,A,(!A))),(!A)))",
            "(->,(->,(!A),(|,A,(!A))),(->,(->,(!A),(!(|,A,(!A)))),(!(!A))))",
            "(->,(->,(->,(!A),(|,A,(!A))),(->,(->,(!A),(!(|,A,(!A)))),(!(!A)))),(->,(->,(!A),(|,A,(!A))),(->,(->,(!A),(|,A,(!A))),(->,(->,(!A),(!(|,A,(!A)))),(!(!A))))))",
            "(->,(->,(!A),(|,A,(!A))),(->,(->,(!A),(|,A,(!A))),(->,(->,(!A),(!(|,A,(!A)))),(!(!A)))))",
            "(->,(->,(->,(!A),(|,A,(!A))),(->,(->,(!A),(!(|,A,(!A)))),(!(!A)))),(->,(!(|,A,(!A))),(->,(->,(!A),(|,A,(!A))),(->,(->,(!A),(!(|,A,(!A)))),(!(!A))))))",
            "(->,(->,(->,(->,(!A),(|,A,(!A))),(->,(->,(!A),(!(|,A,(!A)))),(!(!A)))),(->,(!(|,A,(!A))),(->,(->,(!A),(|,A,(!A))),(->,(->,(!A),(!(|,A,(!A)))),(!(!A)))))),(->,(->,(!A),(|,A,(!A))),(->,(->,(->,(!A),(|,A,(!A))),(->,(->,(!A),(!(|,A,(!A)))),(!(!A)))),(->,(!(|,A,(!A))),(->,(->,(!A),(|,A,(!A))),(->,(->,(!A),(!(|,A,(!A)))),(!(!A))))))))",
            "(->,(->,(!A),(|,A,(!A))),(->,(->,(->,(!A),(|,A,(!A))),(->,(->,(!A),(!(|,A,(!A)))),(!(!A)))),(->,(!(|,A,(!A))),(->,(->,(!A),(|,A,(!A))),(->,(->,(!A),(!(|,A,(!A)))),(!(!A)))))))",
            "(->,(->,(->,(!A),(|,A,(!A))),(->,(->,(!A),(|,A,(!A))),(->,(->,(!A),(!(|,A,(!A)))),(!(!A))))),(->,(->,(->,(!A),(|,A,(!A))),(->,(->,(->,(!A),(|,A,(!A))),(->,(->,(!A),(!(|,A,(!A)))),(!(!A)))),(->,(!(|,A,(!A))),(->,(->,(!A),(|,A,(!A))),(->,(->,(!A),(!(|,A,(!A)))),(!(!A))))))),(->,(->,(!A),(|,A,(!A))),(->,(!(|,A,(!A))),(->,(->,(!A),(|,A,(!A))),(->,(->,(!A),(!(|,A,(!A)))),(!(!A))))))))",
            "(->,(->,(->,(!A),(|,A,(!A))),(->,(->,(->,(!A),(|,A,(!A))),(->,(->,(!A),(!(|,A,(!A)))),(!(!A)))),(->,(!(|,A,(!A))),(->,(->,(!A),(|,A,(!A))),(->,(->,(!A),(!(|,A,(!A)))),(!(!A))))))),(->,(->,(!A),(|,A,(!A))),(->,(!(|,A,(!A))),(->,(->,(!A),(|,A,(!A))),(->,(->,(!A),(!(|,A,(!A)))),(!(!A)))))))",
            "(->,(->,(!A),(|,A,(!A))),(->,(!(|,A,(!A))),(->,(->,(!A),(|,A,(!A))),(->,(->,(!A),(!(|,A,(!A)))),(!(!A))))))",
            "(->,(->,(!A),(|,A,(!A))),(->,(!(|,A,(!A))),(->,(!A),(|,A,(!A)))))",
            "(->,(->,(!(|,A,(!A))),(->,(!A),(|,A,(!A)))),(->,(->,(!(|,A,(!A))),(->,(->,(!A),(|,A,(!A))),(->,(->,(!A),(!(|,A,(!A)))),(!(!A))))),(->,(!(|,A,(!A))),(->,(->,(!A),(!(|,A,(!A)))),(!(!A))))))",
            "(->,(->,(->,(!(|,A,(!A))),(->,(!A),(|,A,(!A)))),(->,(->,(!(|,A,(!A))),(->,(->,(!A),(|,A,(!A))),(->,(->,(!A),(!(|,A,(!A)))),(!(!A))))),(->,(!(|,A,(!A))),(->,(->,(!A),(!(|,A,(!A)))),(!(!A)))))),(->,(->,(!A),(|,A,(!A))),(->,(->,(!(|,A,(!A))),(->,(!A),(|,A,(!A)))),(->,(->,(!(|,A,(!A))),(->,(->,(!A),(|,A,(!A))),(->,(->,(!A),(!(|,A,(!A)))),(!(!A))))),(->,(!(|,A,(!A))),(->,(->,(!A),(!(|,A,(!A)))),(!(!A))))))))",
            "(->,(->,(!A),(|,A,(!A))),(->,(->,(!(|,A,(!A))),(->,(!A),(|,A,(!A)))),(->,(->,(!(|,A,(!A))),(->,(->,(!A),(|,A,(!A))),(->,(->,(!A),(!(|,A,(!A)))),(!(!A))))),(->,(!(|,A,(!A))),(->,(->,(!A),(!(|,A,(!A)))),(!(!A)))))))",
            "(->,(->,(->,(!A),(|,A,(!A))),(->,(!(|,A,(!A))),(->,(!A),(|,A,(!A))))),(->,(->,(->,(!A),(|,A,(!A))),(->,(->,(!(|,A,(!A))),(->,(!A),(|,A,(!A)))),(->,(->,(!(|,A,(!A))),(->,(->,(!A),(|,A,(!A))),(->,(->,(!A),(!(|,A,(!A)))),(!(!A))))),(->,(!(|,A,(!A))),(->,(->,(!A),(!(|,A,(!A)))),(!(!A))))))),(->,(->,(!A),(|,A,(!A))),(->,(->,(!(|,A,(!A))),(->,(->,(!A),(|,A,(!A))),(->,(->,(!A),(!(|,A,(!A)))),(!(!A))))),(->,(!(|,A,(!A))),(->,(->,(!A),(!(|,A,(!A)))),(!(!A))))))))",
            "(->,(->,(->,(!A),(|,A,(!A))),(->,(->,(!(|,A,(!A))),(->,(!A),(|,A,(!A)))),(->,(->,(!(|,A,(!A))),(->,(->,(!A),(|,A,(!A))),(->,(->,(!A),(!(|,A,(!A)))),(!(!A))))),(->,(!(|,A,(!A))),(->,(->,(!A),(!(|,A,(!A)))),(!(!A))))))),(->,(->,(!A),(|,A,(!A))),(->,(->,(!(|,A,(!A))),(->,(->,(!A),(|,A,(!A))),(->,(->,(!A),(!(|,A,(!A)))),(!(!A))))),(->,(!(|,A,(!A))),(->,(->,(!A),(!(|,A,(!A)))),(!(!A)))))))",
            "(->,(->,(!A),(|,A,(!A))),(->,(->,(!(|,A,(!A))),(->,(->,(!A),(|,A,(!A))),(->,(->,(!A),(!(|,A,(!A)))),(!(!A))))),(->,(!(|,A,(!A))),(->,(->,(!A),(!(|,A,(!A)))),(!(!A))))))",
            "(->,(->,(->,(!A),(|,A,(!A))),(->,(!(|,A,(!A))),(->,(->,(!A),(|,A,(!A))),(->,(->,(!A),(!(|,A,(!A)))),(!(!A)))))),(->,(->,(->,(!A),(|,A,(!A))),(->,(->,(!(|,A,(!A))),(->,(->,(!A),(|,A,(!A))),(->,(->,(!A),(!(|,A,(!A)))),(!(!A))))),(->,(!(|,A,(!A))),(->,(->,(!A),(!(|,A,(!A)))),(!(!A)))))),(->,(->,(!A),(|,A,(!A))),(->,(!(|,A,(!A))),(->,(->,(!A),(!(|,A,(!A)))),(!(!A)))))))",
            "(->,(->,(->,(!A),(|,A,(!A))),(->,(->,(!(|,A,(!A))),(->,(->,(!A),(|,A,(!A))),(->,(->,(!A),(!(|,A,(!A)))),(!(!A))))),(->,(!(|,A,(!A))),(->,(->,(!A),(!(|,A,(!A)))),(!(!A)))))),(->,(->,(!A),(|,A,(!A))),(->,(!(|,A,(!A))),(->,(->,(!A),(!(|,A,(!A)))),(!(!A))))))",
            "(->,(->,(!A),(|,A,(!A))),(->,(!(|,A,(!A))),(->,(->,(!A),(!(|,A,(!A)))),(!(!A)))))",
            "(->,(!(|,A,(!A))),(->,(!A),(!(|,A,(!A)))))",
            "(->,(->,(!(|,A,(!A))),(->,(!A),(!(|,A,(!A))))),(->,(->,(!A),(|,A,(!A))),(->,(!(|,A,(!A))),(->,(!A),(!(|,A,(!A)))))))",
            "(->,(->,(!A),(|,A,(!A))),(->,(!(|,A,(!A))),(->,(!A),(!(|,A,(!A))))))",
            "(->,(->,(!(|,A,(!A))),(->,(!A),(!(|,A,(!A))))),(->,(->,(!(|,A,(!A))),(->,(->,(!A),(!(|,A,(!A)))),(!(!A)))),(->,(!(|,A,(!A))),(!(!A)))))",
            "(->,(->,(->,(!(|,A,(!A))),(->,(!A),(!(|,A,(!A))))),(->,(->,(!(|,A,(!A))),(->,(->,(!A),(!(|,A,(!A)))),(!(!A)))),(->,(!(|,A,(!A))),(!(!A))))),(->,(->,(!A),(|,A,(!A))),(->,(->,(!(|,A,(!A))),(->,(!A),(!(|,A,(!A))))),(->,(->,(!(|,A,(!A))),(->,(->,(!A),(!(|,A,(!A)))),(!(!A)))),(->,(!(|,A,(!A))),(!(!A)))))))",
            "(->,(->,(!A),(|,A,(!A))),(->,(->,(!(|,A,(!A))),(->,(!A),(!(|,A,(!A))))),(->,(->,(!(|,A,(!A))),(->,(->,(!A),(!(|,A,(!A)))),(!(!A)))),(->,(!(|,A,(!A))),(!(!A))))))",
            "(->,(->,(->,(!A),(|,A,(!A))),(->,(!(|,A,(!A))),(->,(!A),(!(|,A,(!A)))))),(->,(->,(->,(!A),(|,A,(!A))),(->,(->,(!(|,A,(!A))),(->,(!A),(!(|,A,(!A))))),(->,(->,(!(|,A,(!A))),(->,(->,(!A),(!(|,A,(!A)))),(!(!A)))),(->,(!(|,A,(!A))),(!(!A)))))),(->,(->,(!A),(|,A,(!A))),(->,(->,(!(|,A,(!A))),(->,(->,(!A),(!(|,A,(!A)))),(!(!A)))),(->,(!(|,A,(!A))),(!(!A)))))))",
            "(->,(->,(->,(!A),(|,A,(!A))),(->,(->,(!(|,A,(!A))),(->,(!A),(!(|,A,(!A))))),(->,(->,(!(|,A,(!A))),(->,(->,(!A),(!(|,A,(!A)))),(!(!A)))),(->,(!(|,A,(!A))),(!(!A)))))),(->,(->,(!A),(|,A,(!A))),(->,(->,(!(|,A,(!A))),(->,(->,(!A),(!(|,A,(!A)))),(!(!A)))),(->,(!(|,A,(!A))),(!(!A))))))",
            "(->,(->,(!A),(|,A,(!A))),(->,(->,(!(|,A,(!A))),(->,(->,(!A),(!(|,A,(!A)))),(!(!A)))),(->,(!(|,A,(!A))),(!(!A)))))",
            "(->,(->,(->,(!A),(|,A,(!A))),(->,(!(|,A,(!A))),(->,(->,(!A),(!(|,A,(!A)))),(!(!A))))),(->,(->,(->,(!A),(|,A,(!A))),(->,(->,(!(|,A,(!A))),(->,(->,(!A),(!(|,A,(!A)))),(!(!A)))),(->,(!(|,A,(!A))),(!(!A))))),(->,(->,(!A),(|,A,(!A))),(->,(!(|,A,(!A))),(!(!A))))))",
            "(->,(->,(->,(!A),(|,A,(!A))),(->,(->,(!(|,A,(!A))),(->,(->,(!A),(!(|,A,(!A)))),(!(!A)))),(->,(!(|,A,(!A))),(!(!A))))),(->,(->,(!A),(|,A,(!A))),(->,(!(|,A,(!A))),(!(!A)))))",
            "(->,(->,(!A),(|,A,(!A))),(->,(!(|,A,(!A))),(!(!A))))",
            "(->,(!(|,A,(!A))),(!A))",
            "(->,(!(|,A,(!A))),(!(!A)))",
            "(->,(->,(!(|,A,(!A))),(!A)),(->,(->,(!(|,A,(!A))),(!(!A))),(!(!(|,A,(!A))))))",
            "(->,(->,(!(|,A,(!A))),(!(!A))),(!(!(|,A,(!A)))))",
            "(!(!(|,A,(!A))))",
            "(->,(!(!(|,A,(!A)))),(|,A,(!A)))",
            "(|,A,(!A))",
            "B",
    };

    const string A_NOTNOTA[] = {
            "(A)",
            "(->,(!A),(->,(->,(!A),(!A)),(!A)))",
            "(->,(!A),(->,(!A),(!A)))",
            "(->,(->,(!A),(->,(!A),(!A))),(->,(->,(!A),(->,(->,(!A),(!A)),(!A))),(->,(!A),(!A))))",
            "(->,(->,(!A),(->,(->,(!A),(!A)),(!A))),(->,(!A),(!A)))",
            "(->,(!A),(!A))",
            "(->,A,(->,(!A),A))",
            "(->,(!A),A)",
            "(->,(->,(!A),A),(->,(->,(!A),(!A)),(!(!A))))",
            "(->,(->,(!A),(!A)),(!(!A)))",
            "(!(!A))",
    };
}

const string ax1 = "(->,A,(->,B,A))";
const string ax2 = "(->,(->,A,B),(->,(->,A,(->,B,C)),(->,A,C)))";
const string ax3 = "(->,A,(->,B,(&,A,B)))";
const string ax4 = "(->,(&,A,B),A)";
const string ax5 = "(->,(&,A,B),B)";
const string ax6 = "(->,A,(|,A,B))";
const string ax7 = "(->,B,(|,A,B))";
const string ax8 = "(->,(->,A,C),(->,(->,B,C),(->,(|,A,B),C)))";
const string ax9 = "(->,(->,A,B),(->,(->,A,(!B)),(!A)))";
const string ax10 = "(->,(!(!A)),A)";

const string AND = "&";
const string NOT = "!";
const string OR = "|";
const string IMPL = "->";

string first_var = "";
string second_var = "";
string third_var = "";

bool isSign(const string &value) {
    return value == AND || value == OR || value == NOT || value == IMPL;
}

bool isUnary(const string &sign) {
    return sign == NOT;
}

bool isLetter(char c) {
    return c >= 'A' && c <= 'Z';
}

string parseVar(string str, int &pos) {
    int begin = pos;
    while ((str[pos] >= 'A' && str[pos] <= 'Z') || (str[pos] >= '0' && str[pos] <= '9') || str[pos] == '\'') {
        pos++;
    }

    return str.substr(begin, pos - begin);
}

struct expr {
    expr *left;
    expr *right;

    string value;
    bool is_axi = false;
    size_t just_hash = 0;

    void init_hash() {
        just_hash = std::hash<std::string>()(to_string());
    }

    void init(expr *a, expr *b = nullptr, expr *c = nullptr) {
        if (isSign(value)) {
            if (isUnary(value)) {
                left->init(a, b, c);
            } else {
                left->init(a, b, c);
                right->init(a, b, c);
            }
        } else {
            if (value == "A") {
                value = a->value;
                left = a->left;
                right = a->right;
            } else if (value == "B") {
                value = b->value;
                left = b->left;
                right = b->right;
            } else {
                value = c->value;
                left = c->left;
                right = c->right;
            }
        }
    }

    expr(expr &left, expr &right, string const &sign) {
        this->left = &left;
        this->right = &right;
        this->value = sign;
    }

    expr(string const &str, int &pos, bool is_axi = false) {
        this->is_axi = is_axi;

        if (isLetter(str[pos])) {
            value = parseVar(str, pos);
            left = nullptr;
            right = nullptr;
            init_hash();
            return;
        }

        pos++;
        while (str[pos] == '(' || str[pos] == ')' || str[pos] == ',') {
            pos++;
        }
        int begin = pos;

        if (isLetter(str[pos])) {
            value = parseVar(str, pos);
            left = nullptr;
            right = nullptr;
            init_hash();
            return;
        }

        if (str[pos] == '!') {
            value = NOT;
            left = new expr(str, pos);
            right = nullptr;
        } else {
            while (pos < str.length() && str[pos] != ',') {
                pos++;
            }

            value = str.substr(begin, pos - begin);
            left = new expr(str, pos);
            right = new expr(str, pos);
        }
        init_hash();
    }

    string create_view() const {
        if (isSign(value)) {
            if (isUnary(value)) {
                return value + left->create_view();
            } else {
                return "(" + left->create_view() + " " + value + " " + right->create_view() + ")";
            }
        } else {
            return value;
        }
    }

    string create_fake_view(string a) const {
        if (isSign(value)) {
            if (isUnary(value)) {
                return value + left->create_fake_view(a);
            } else {
                return "(" + left->create_fake_view(a) + " " + value + " " + right->create_fake_view(a) + ")";
            }
        } else {
            return a;
        }
    }

    string create_double_fake_view(string a, string b) const {
        if (isSign(value)) {
            if (isUnary(value)) {
                return value + left->create_double_fake_view(a, b);
            } else {
                return "(" + left->create_double_fake_view(a, b) + " " + value + " " +
                       right->create_double_fake_view(a, b) + ")";
            }
        } else {
            return (value == "A" ? a : b);
        }
    }

    string to_string() const {
        return create_view();
    }

    bool equals(const expr &other) const {
        if (is_axi || other.is_axi) {
            map<string, string> ma;
            return comp(this, &other, ma);
        } else {
            return to_string() == other.to_string();
        }
    }

    bool operator==(const expr &other) const {
        return equals(other);
    }

    size_t hash() const {
        return just_hash;
    }

    bool isImpl() {
        return value == IMPL;
    }

    bool static comp(const expr *lhs, const expr *other, map<string, string> &ma) {
        if (isSign(other->value) && !isSign(lhs->value)) {
            if (!ma.count(lhs->value)) {
                ma[lhs->value] = other->to_string();
                return true;
            } else {
                return ma[lhs->value] == other->to_string();
            }
        }

        if ((lhs->left == nullptr && other->left != nullptr)
            || (lhs->right == nullptr && other->right != nullptr)
            || (lhs->left != nullptr && other->left == nullptr)
            || (lhs->right != nullptr && other->right == nullptr)) {

            return false;
        }

        if ((isSign(lhs->value) || isSign(other->value))) {
            if (lhs->value != other->value) {
                return false;
            } else {
                return ((lhs->left == nullptr && other->left == nullptr) || comp(lhs->left, other->left, ma))
                       &&
                       ((lhs->right == nullptr && other->right == nullptr) || comp(lhs->right, other->right, ma));
            }
        }

        if (!ma.count(lhs->value)) {
            ma[lhs->value] = other->value;
            return true;
        } else {
            return ma[lhs->value] == other->value;
        }
    }

    void initVariables() const {
        if (isSign(value)) {
            if (isUnary(value)) {
                left->initVariables();
            } else {
                left->initVariables();
                right->initVariables();
            }
        } else {
            if (first_var == "") {
                first_var = value;
            } else if (second_var == "" && value != first_var) {
                second_var = value;
            } else if (third_var == "" && value != first_var && value != second_var) {
                third_var = value;
            }
        }
    }

    bool eval(vector<bool> &var_values) {
        if (isSign(value)) {
            if (isUnary(value)) {
                bool val = left->eval(var_values);
                return !val;
            } else {
                bool val1 = left->eval(var_values);
                bool val2 = right->eval(var_values);
                if (value == AND) {
                    return val1 & val2;
                } else if (value == OR) {
                    return val1 | val2;
                } else {
                    return !val1 | val2;
                }
            }
        } else {
            if (first_var == value) {
                return var_values[0];
            } else if (second_var == value) {
                return var_values[1];
            } else {
                return var_values[2];
            }
        }
    }

    string parse_string() const {
        if (isSign(value)) {
            if (isUnary(value)) {
                return "(" + value + left->parse_string() + ")";
            } else {
                return "(" + value + "," + left->parse_string() + "," + right->parse_string() + ")";
            }
        } else {
            return value;
        }
    }

    string parse_double(string const &a, string const &b) const {
        if (isSign(value)) {
            if (isUnary(value)) {
                return "(" + value + left->parse_double(a, b) + ")";
            } else {
                return "(" + value + "," + left->parse_double(a, b) + "," + right->parse_double(a, b) + ")";
            }
        } else {
            return (value == "A" ? a : b);
        }
    }
};

struct Hash {
    size_t operator()(const expr &k) const {
        return k.hash();
    }
};

vector<expr> axi_map;
string fact_string;
vector<expr> a_b_impl;
vector<expr> a_notb_notimpl;
vector<expr> nota_b_impl;
vector<expr> nota_notb_impl;
vector<expr> a_b_and;
vector<expr> a_notb_notand;
vector<expr> nota_b_notand;
vector<expr> nota_notb_notand;
vector<expr> a_b_or;
vector<expr> a_notb_or;
vector<expr> nota_b_or;
vector<expr> nota_notb_notor;
vector<expr> a_notnota;
vector<expr> exclusion;

void add_a_notnota(expr &left, vector<expr> &res) {
    for (auto &e : a_notnota) {
        int pos = 0;
        res.emplace_back(e.parse_double(left.parse_string(), left.parse_string()), pos);
    }
};


void add_a_b_impl(expr &left, expr &right, vector<expr> &res) {
    for (auto &e : a_b_impl) {
        int pos = 0;
        res.emplace_back(e.parse_double(left.parse_string(), right.parse_string()), pos);
    }
};

void add_a_notb_notimpl(expr &left, expr &right, vector<expr> &res) {
    for (auto &e : a_notb_notimpl) {
        int pos = 0;
        res.emplace_back(e.parse_double(left.parse_string(), right.parse_string()), pos);
    }
};

void add_nota_b_impl(expr &left, expr &right, vector<expr> &res) {
    for (auto &e : nota_b_impl) {
        int pos = 0;
        res.emplace_back(e.parse_double(left.parse_string(), right.parse_string()), pos);
    }
};

void add_nota_notb_impl(expr &left, expr &right, vector<expr> &res) {
    for (auto &e : nota_notb_impl) {
        int pos = 0;
        res.emplace_back(e.parse_double(left.parse_string(), right.parse_string()), pos);
    }
};

void add_a_b_and(expr &left, expr &right, vector<expr> &res) {
    for (auto &e : a_b_and) {
        int pos = 0;
        res.emplace_back(e.parse_double(left.parse_string(), right.parse_string()), pos);
    }
};

void add_a_notb_notand(expr &left, expr &right, vector<expr> &res) {
    for (auto &e : a_notb_notand) {
        int pos = 0;
        res.emplace_back(e.parse_double(left.parse_string(), right.parse_string()), pos);
    }
};

void add_nota_b_notand(expr &left, expr &right, vector<expr> &res) {
    for (auto &e : nota_b_notand) {
        int pos = 0;
        res.emplace_back(e.parse_double(left.parse_string(), right.parse_string()), pos);
    }
};

void add_nota_notb_notand(expr &left, expr &right, vector<expr> &res) {
    for (auto &e : nota_notb_notand) {
        int pos = 0;
        res.emplace_back(e.parse_double(left.parse_string(), right.parse_string()), pos);
    }
};

void add_a_b_or(expr &left, expr &right, vector<expr> &res) {
    for (auto &e : a_b_or) {
        int pos = 0;
        res.emplace_back(e.parse_double(left.parse_string(), right.parse_string()), pos);
    }
};

void add_a_notb_or(expr &left, expr &right, vector<expr> &res) {
    for (auto &e : a_notb_or) {
        int pos = 0;
        res.emplace_back(e.parse_double(left.parse_string(), right.parse_string()), pos);
    }
};

void add_nota_b_or(expr &left, expr &right, vector<expr> &res) {
    for (auto &e : nota_b_or) {
        int pos = 0;
        res.emplace_back(e.parse_double(left.parse_string(), right.parse_string()), pos);
    }
};

void add_nota_notb_notor(expr &left, expr &right, vector<expr> &res) {
    for (auto &e : nota_notb_notor) {
        int pos = 0;
        res.emplace_back(e.parse_double(left.parse_string(), right.parse_string()), pos);
    }
};

void add_exclusion(expr &left, expr &right, vector<expr> &res) {
    for (auto &e : exclusion) {
        int pos = 0;
        res.emplace_back(e.parse_double(left.parse_string(), right.parse_string()), pos);
    }
};

void init_axis() {
    int pos = 0;
    axi_map.push_back(expr(ax1, pos, true));
    pos = 0;
    axi_map.push_back(expr(ax2, pos, true));
    pos = 0;
    axi_map.push_back(expr(ax3, pos, true));
    pos = 0;
    axi_map.push_back(expr(ax4, pos, true));
    pos = 0;
    axi_map.push_back(expr(ax5, pos, true));
    pos = 0;
    axi_map.push_back(expr(ax6, pos, true));
    pos = 0;
    axi_map.push_back(expr(ax7, pos, true));
    pos = 0;
    axi_map.push_back(expr(ax8, pos, true));
    pos = 0;
    axi_map.push_back(expr(ax9, pos, true));
    pos = 0;
    axi_map.push_back(expr(ax10, pos, true));

    for (const auto &rule : precalc::A_B_IMPL) {
        pos = 0;
        a_b_impl.push_back(expr(rule, pos, true));
    }

    for (const auto &rule : precalc::A_notB_notIMPL) {
        pos = 0;
        a_notb_notimpl.push_back(expr(rule, pos, true));
    }

    for (const auto &rule : precalc::notA_B_IMPL) {
        pos = 0;
        nota_b_impl.push_back(expr(rule, pos, true));
    }

    for (const auto &rule : precalc::notA_notB_IMPL) {
        pos = 0;
        nota_notb_impl.push_back(expr(rule, pos, true));
    }

    for (const auto &rule : precalc::A_B_AND) {
        pos = 0;
        a_b_and.push_back(expr(rule, pos, true));
    }

    for (const auto &rule : precalc::A_notB_notAND) {
        pos = 0;
        a_notb_notand.push_back(expr(rule, pos, true));
    }

    for (const auto &rule : precalc::notA_B_notAND) {
        pos = 0;
        nota_b_notand.push_back(expr(rule, pos, true));
    }

    for (const auto &rule : precalc::notA_notB_notAND) {
        pos = 0;
        nota_notb_notand.push_back(expr(rule, pos, true));
    }

    for (const auto &rule : precalc::A_B_OR) {
        pos = 0;
        a_b_or.push_back(expr(rule, pos, true));
    }

    for (const auto &rule : precalc::A_notB_OR) {
        pos = 0;
        a_notb_or.push_back(expr(rule, pos, true));
    }

    for (const auto &rule : precalc::notA_B_OR) {
        pos = 0;
        nota_b_or.push_back(expr(rule, pos, true));
    }

    for (const auto &rule : precalc::notA_notB_notOR) {
        pos = 0;
        nota_notb_notor.push_back(expr(rule, pos, true));
    }

    for (const auto &rule : precalc::A_NOTNOTA) {
        pos = 0;
        a_notnota.push_back(expr(rule, pos, true));
    }

    for (const auto &rule : precalc::exclusion) {
        pos = 0;
        exclusion.push_back(expr(rule, pos, true));
    }
}

int getAxiNumber(expr const &line) {
    for (int i = 0; i < 10; i++) {
        if (axi_map[i] == line) {
            return i + 1;
        }
    }

    return 0;
}

vector<expr> deduct(vector<expr> &lines, expr &hyp, unordered_map<expr, int, Hash> &hypo_map) {
    vector<expr> result;
    unordered_map<expr, int, Hash> left_map;
    unordered_map<expr, vector<pair<expr *, expr *>>, Hash> modus_map;

    int line_number = 1;
    for (auto &line : lines) {
        if (left_map.count(line)) {
            line_number++;
            int pos = 0;
            result.emplace_back("(->," + hyp.parse_string() + "," + line.parse_string() + ")", pos);
            continue;
        } else if (line == hyp) {
            left_map[line] = line_number - 1;

            string first_line = "(->,A,(->,A,A))";
            string second_line = "(->,(->,A,(->,A,A)),(->,(->,A,(->,(->,A,A),A)),(->,A,A)))";
            string third_line = "(->,(->,A,(->,(->,A,A),A)),(->,A,A))";
            string fourth_line = "(->,A,(->,(->,A,A),A))";
            string fifth_line = "(->,A,A)";

            int pos;
            pos = 0;
            expr first(first_line, pos);
            first.init(&line);
            result.push_back(first);

            pos = 0;
            expr second(second_line, pos);
            second.init(&line);
            result.push_back(second);

            pos = 0;
            expr third(third_line, pos);
            third.init(&line);
            result.push_back(third);

            pos = 0;
            expr fourth(fourth_line, pos);
            fourth.init(&line);
            result.push_back(fourth);

            pos = 0;
            expr fifth(fifth_line, pos);
            fifth.init(&line);
            result.push_back(fifth);

        } else if (getAxiNumber(line) || hypo_map.count(line)) {
            left_map[line] = line_number - 1;

            if (line.right != nullptr && line.isImpl()) {
                modus_map[*line.right].push_back({line.left, &line});
            }

            result.push_back(line);
            string first_line = "(->,A,(->,B,A))";
            string second_line = "A";
            string third_line = "(->,B,A)";

            int pos;
            pos = 0;
            expr first(first_line, pos);
            first.init(&line, &hyp);
            result.push_back(first);

            pos = 0;
            expr second(second_line, pos);
            second.init(&line);
            result.push_back(second);

            pos = 0;
            expr third(third_line, pos);
            third.init(&line, &hyp);
            result.push_back(third);

        } else if (modus_map.count(line)) {
            auto &list = modus_map[line];
            for (auto &par : list) {
                if (left_map.count(*par.first)) {
                    left_map[line] = line_number - 1;

                    if (line.right != nullptr && line.isImpl()) {
                        modus_map[*line.right].push_back({line.left, &line});
                    }

                    string first_line = "(->,(->,A,B),(->,(->,A,(->,B,C)),(->,A,C)))";
                    string second_line = "(->,(->,A,(->,B,C)),(->,A,C))";
                    string third_line = "(->,A,C)";

                    int pos;
                    pos = 0;
                    expr first(first_line, pos);
                    first.init(&hyp, par.second->left, par.second->right);
                    result.push_back(first);

                    pos = 0;
                    expr second(second_line, pos);
                    second.init(&hyp, par.second->left, par.second->right);
                    result.push_back(second);

                    pos = 0;
                    expr third(third_line, pos);
                    third.init(&hyp, par.second->left, par.second->right);
                    result.push_back(third);

                    break;
                }
            }
        } else {
            throw "AAAAAA:(";
            cout << "skip: " << line_number << " - " << line.to_string() << endl;
        }

        line_number++;
    }

    return result;
}

vector<bool> var_values(3, true);
vector<bool> var_results(7, false);

void values_from_number(int sum) {
    var_values[2] = sum % 2;
    sum /= 2;
    var_values[1] = sum % 2;
    sum /= 2;
    var_values[0] = sum;
}

void next_vars() {
    int sum = var_values[0] * 4 + var_values[1] * 2 + var_values[2];
    values_from_number(sum - 1);
}

bool check_hypos(vector<bool> hyps, vector<bool> &res) {
    set<int> nums = {0, 1, 2, 3, 4, 5, 6, 7};
    if (hyps[0]) {
        nums.erase(4);
        nums.erase(5);
        nums.erase(6);
        nums.erase(7);
    }

    if (hyps[1]) {
        nums.erase(2);
        nums.erase(3);
        nums.erase(6);
        nums.erase(7);
    }

    if (hyps[2]) {
        nums.erase(1);
        nums.erase(3);
        nums.erase(5);
        nums.erase(7);
    }

    for (auto a : nums) {
        if (!res[a]) {
            return false;
        }
    }

    return true;
}

bool eval(vector<bool> &var_values, vector<expr> &result, expr &e) {
    if (isSign(e.value)) {
        if (isUnary(e.value)) {
            if (isSign(e.left->value) && isUnary(e.left->value)) {
                bool val = eval(var_values, result, *(e.left->left));
                if (val) {
                    add_a_notnota(*(e.left->left), result);
                } else {
                    add_a_notnota(*e.left, result);
                }
                return val;
            } else {
                bool val = eval(var_values, result, *e.left);
                if (val) {
                    add_a_notnota(*e.left, result);
                } else {
//                    add_a_notnota(e, result);
                }
                return !val;
            }
        } else {
            bool val1 = eval(var_values, result, *e.left);
            bool val2 = eval(var_values, result, *e.right);

            if (e.value == AND) {
                if (val1 && val2) {
                    add_a_b_and(*e.left, *e.right, result);
                } else if (val1 && !val2) {
                    add_a_notb_notand(*e.left, *e.right, result);
                } else if (!val1 && val2) {
                    add_nota_b_notand(*e.left, *e.right, result);
                } else if (!val1 && !val2) {
                    add_nota_notb_notand(*e.left, *e.right, result);
                }

                return val1 & val2;
            } else if (e.value == OR) {
                if (val1 && val2) {
                    add_a_b_or(*e.left, *e.right, result);
                } else if (val1 && !val2) {
                    add_a_notb_or(*e.left, *e.right, result);
                } else if (!val1 && val2) {
                    add_nota_b_or(*e.left, *e.right, result);
                } else if (!val1 && !val2) {
                    add_nota_notb_notor(*e.left, *e.right, result);
                }

                return val1 | val2;
            } else {
                if (val1 && val2) {
                    add_a_b_impl(*e.left, *e.right, result);
                } else if (val1 && !val2) {
                    add_a_notb_notimpl(*e.left, *e.right, result);
                } else if (!val1 && val2) {
                    add_nota_b_impl(*e.left, *e.right, result);
                } else if (!val1 && !val2) {
                    add_nota_notb_impl(*e.left, *e.right, result);
                }

                return !val1 | val2;
            }
        }
    } else {
//        int pos = 0;
        if (first_var == e.value) {
//            result.emplace_back(var_values[0] ? first_var : "!" + first_var, pos);
            return var_values[0];
        } else if (second_var == e.value) {
//            result.emplace_back(var_values[1] ? second_var : "!" + second_var, pos);
            return var_values[1];
        } else {
//            result.emplace_back(var_values[2] ? third_var : "!" + third_var, pos);
            return var_values[2];
        }
    }
}

void print_fact(vector<string> &need_hyp, expr &fact, bool is_from_neg) {
    if (!need_hyp.empty()) {
        if (is_from_neg) {
            cout << "!";
        }
        cout << need_hyp[0];
        for (int i = 1; i < need_hyp.size(); i++) {
            cout << ", ";
            if (is_from_neg) {
                cout << "!";
            }

            cout << need_hyp[i];
        }
        cout << " ";
    }
    cout << "|- " << fact.to_string() << endl;
}

vector<expr> remove_var(vector<expr> &first, vector<expr> &second) {
    vector<expr> result;
    if (first.empty() || second.empty()) {
        return result;
    }

    for (auto &a : first) {
        result.push_back(a);
    }
    for (auto &a : second) {
        result.push_back(a);
    }
    add_exclusion(*second.back().left, *second.back().right, result);

    return result;
}

void prove(expr &fact, bool is_from_neg) {
    vector<int> real_results(8);
    for (int i = 0; i < 8; i++) {
        if (is_from_neg) {
            var_results[7 - i] = fact.eval(var_values);
        } else {
            var_results[i] = fact.eval(var_values);
        }
        real_results[i] = fact.eval(var_values);
        next_vars();
    }

    vector<string> need_hyp;
    if (check_hypos({0, 0, 0}, var_results)) {
        // empty
    } else if (check_hypos({1, 0, 0}, var_results)) {
        need_hyp.push_back(first_var);
    } else if (check_hypos({0, 1, 0}, var_results)) {
        need_hyp.push_back(second_var);
        swap(first_var, second_var);
    } else if (check_hypos({0, 0, 1}, var_results)) {
        need_hyp.push_back(third_var);
        swap(first_var, third_var);
    } else if (check_hypos({1, 1, 0}, var_results)) {
        need_hyp.push_back(first_var);
        need_hyp.push_back(second_var);
    } else if (check_hypos({1, 0, 1}, var_results)) {
        need_hyp.push_back(first_var);
        need_hyp.push_back(third_var);
        swap(second_var, third_var);
    } else if (check_hypos({0, 1, 1}, var_results)) {
        need_hyp.push_back(second_var);
        need_hyp.push_back(third_var);
        swap(third_var, first_var);
    } else if (check_hypos({1, 1, 1}, var_results)) {
        need_hyp.push_back(first_var);
        need_hyp.push_back(second_var);
        need_hyp.push_back(third_var);
    }

    print_fact(need_hyp, fact, is_from_neg);

    vector<expr> simples[8];
    for (int i = 0; i < 8; i++) {
        values_from_number(i);

        if (fact.eval(var_values)) {
            vector<expr> temp;

            int pos = 0;
            expr first(var_values[0] ? first_var : "(!" + first_var, pos);
            temp.push_back(first);

            if (second_var != "") {
                pos = 0;
                expr second(var_values[1] ? second_var : "(!" + second_var + ")", pos);
                temp.push_back(second);
            }
            if (third_var != "") {
                pos = 0;
                expr third(var_values[2] ? third_var : "(!" + third_var + ")", pos);
                temp.push_back(third);
            }

            eval(var_values, temp, fact);
            simples[i] = temp;
        }
    }

    vector<expr> res3[8];
    vector<expr> res2[4];
    vector<expr> res1[2];
    vector<expr> res0[1];
    if (third_var != "" && need_hyp.size() < 3) {
        for (int i = 0; i < 8; i++) {
            if (simples[i].size() == 0) {
                continue;
            }

            values_from_number(i);

            int pos = 0;
            expr first(var_values[0] ? first_var : "(!" + first_var + ")", pos);
            pos = 0;
            expr second(var_values[1] ? second_var : "(!" + second_var + ")", pos);
            pos = 0;
            expr third(var_values[2] ? third_var : "(!" + third_var + ")", pos);

            unordered_map<expr, int, Hash> hypo_map;
            hypo_map[first] = 1;
            hypo_map[second] = 2;

            for (auto &j : simples[i]) {
                int pos = 0;
                expr temp(j.parse_string(), pos);
                j = temp;
            }

            res3[i] = deduct(simples[i], third, hypo_map);
        }
        res2[0] = remove_var(res3[0], res3[1]);
        res2[1] = remove_var(res3[2], res3[3]);
        res2[2] = remove_var(res3[4], res3[5]);
        res2[3] = remove_var(res3[6], res3[7]);
    } else {
        res2[0] = simples[0 + (is_from_neg ? 0 : 1)];
        res2[1] = simples[2 + (is_from_neg ? 0 : 1)];
        res2[2] = simples[4 + (is_from_neg ? 0 : 1)];
        res2[3] = simples[6 + (is_from_neg ? 0 : 1)];
    }

    if (second_var != "" && need_hyp.size() < 2) {
        for (int i = 0; i < 4; i++) {
            if (res2[i].size() == 0) {
                continue;
            }

            values_from_number(i * 2);

            int pos = 0;
            expr first(var_values[0] ? first_var : "(!" + first_var + ")", pos);
            pos = 0;
            expr second(var_values[1] ? second_var : "(!" + second_var + ")", pos);

            unordered_map<expr, int, Hash> hypo_map;
            hypo_map[first] = 1;
            vector<expr> temp;

            for (auto &j : res2[i]) {
                int pos = 0;
                expr temp(j.parse_string(), pos);
                j = temp;
            }

            res2[i] = deduct(res2[i], second, hypo_map);
        }
        res1[0] = remove_var(res2[0], res2[1]);
        res1[1] = remove_var(res2[2], res2[3]);
    } else {
        res1[0] = res2[0 + (is_from_neg ? 0 : 1)];
        res1[1] = res2[2 + (is_from_neg ? 0 : 1)];
    }

    if (first_var != "" && need_hyp.size() < 1) {
        for (int i = 0; i < 2; i++) {
            if (res1[i].size() == 0) {
                continue;
            }

            values_from_number(i * 4);

            for (auto &j : res1[i]) {
                int pos = 0;
                expr temp(j.parse_string(), pos);
                j = temp;
            }

            int pos = 0;
            expr first(var_values[0] ? first_var : "(!" + first_var + ")", pos);

            unordered_map<expr, int, Hash> hypo_map;
            res1[i] = deduct(res1[i], first, hypo_map);
        }
        res0[0] = remove_var(res1[0], res1[1]);
    } else {
        res0[0] = res1[0 + (is_from_neg ? 0 : 1)];
    }

    for (auto &e : res0[0]) {
        cout << e.to_string() << endl;
    }
//    cout << fact.to_string() << endl;
}

void test() {
    vector<string> strs = {
            "(!B)",
            "(->,(!B),(->,(!C),(!B)))",
            "(!B)",
            "(->,(!C),(!B))",
            "(!A)",
            "(->,(!A),(->,(!C),(!A)))",
            "(!A)",
            "(->,(!C),(!A))",
            "(->,(!C),(->,(!C),(!C)))",
            "(->,(->,(!C),(->,(!C),(!C))),(->,(->,(!C),(->,(->,(!C),(!C)),(!C))),(->,(!C),(!C))))",
            "(->,(->,(!C),(->,(->,(!C),(!C)),(!C))),(->,(!C),(!C)))",
            "(->,(!C),(->,(->,(!C),(!C)),(!C)))",
            "(->,(!C),(!C))",
            "(->,(!C),(!A))",
            "(->,(!(!A)),(->,(->,(!(!A)),(!(!A))),(!(!A))))",
            "(->,(->,(!(!A)),(->,(->,(!(!A)),(!(!A))),(!(!A)))),(->,(!C),(->,(!(!A)),(->,(->,(!(!A)),(!(!A))),(!(!A))))))",
            "(->,(!(!A)),(->,(->,(!(!A)),(!(!A))),(!(!A))))",
            "(->,(!C),(->,(!(!A)),(->,(->,(!(!A)),(!(!A))),(!(!A)))))",
            "(->,(!(!A)),(->,(!(!A)),(!(!A))))",
            "(->,(->,(!(!A)),(->,(!(!A)),(!(!A)))),(->,(!C),(->,(!(!A)),(->,(!(!A)),(!(!A))))))",
            "(->,(!(!A)),(->,(!(!A)),(!(!A))))",
            "(->,(!C),(->,(!(!A)),(->,(!(!A)),(!(!A)))))",
            "(->,(->,(!(!A)),(->,(!(!A)),(!(!A)))),(->,(->,(!(!A)),(->,(->,(!(!A)),(!(!A))),(!(!A)))),(->,(!(!A)),(!(!A)))))",
            "(->,(->,(->,(!(!A)),(->,(!(!A)),(!(!A)))),(->,(->,(!(!A)),(->,(->,(!(!A)),(!(!A))),(!(!A)))),(->,(!(!A)),(!(!A))))),(->,(!C),(->,(->,(!(!A)),(->,(!(!A)),(!(!A)))),(->,(->,(!(!A)),(->,(->,(!(!A)),(!(!A))),(!(!A)))),(->,(!(!A)),(!(!A)))))))",
            "(->,(->,(!(!A)),(->,(!(!A)),(!(!A)))),(->,(->,(!(!A)),(->,(->,(!(!A)),(!(!A))),(!(!A)))),(->,(!(!A)),(!(!A)))))",
            "(->,(!C),(->,(->,(!(!A)),(->,(!(!A)),(!(!A)))),(->,(->,(!(!A)),(->,(->,(!(!A)),(!(!A))),(!(!A)))),(->,(!(!A)),(!(!A))))))",
            "(->,(->,(!C),(->,(!(!A)),(->,(!(!A)),(!(!A))))),(->,(->,(!C),(->,(->,(!(!A)),(->,(!(!A)),(!(!A)))),(->,(->,(!(!A)),(->,(->,(!(!A)),(!(!A))),(!(!A)))),(->,(!(!A)),(!(!A)))))),(->,(!C),(->,(->,(!(!A)),(->,(->,(!(!A)),(!(!A))),(!(!A)))),(->,(!(!A)),(!(!A)))))))",
            "(->,(->,(!C),(->,(->,(!(!A)),(->,(!(!A)),(!(!A)))),(->,(->,(!(!A)),(->,(->,(!(!A)),(!(!A))),(!(!A)))),(->,(!(!A)),(!(!A)))))),(->,(!C),(->,(->,(!(!A)),(->,(->,(!(!A)),(!(!A))),(!(!A)))),(->,(!(!A)),(!(!A))))))",
            "(->,(!C),(->,(->,(!(!A)),(->,(->,(!(!A)),(!(!A))),(!(!A)))),(->,(!(!A)),(!(!A)))))",
            "(->,(->,(!C),(->,(!(!A)),(->,(->,(!(!A)),(!(!A))),(!(!A))))),(->,(->,(!C),(->,(->,(!(!A)),(->,(->,(!(!A)),(!(!A))),(!(!A)))),(->,(!(!A)),(!(!A))))),(->,(!C),(->,(!(!A)),(!(!A))))))",
            "(->,(->,(!C),(->,(->,(!(!A)),(->,(->,(!(!A)),(!(!A))),(!(!A)))),(->,(!(!A)),(!(!A))))),(->,(!C),(->,(!(!A)),(!(!A)))))",
            "(->,(!C),(->,(!(!A)),(!(!A))))",
            "(->,(!A),(->,(!(!A)),(!A)))",
            "(->,(->,(!A),(->,(!(!A)),(!A))),(->,(!C),(->,(!A),(->,(!(!A)),(!A)))))",
            "(->,(!A),(->,(!(!A)),(!A)))",
            "(->,(!C),(->,(!A),(->,(!(!A)),(!A))))",
            "(->,(->,(!C),(!A)),(->,(->,(!C),(->,(!A),(->,(!(!A)),(!A)))),(->,(!C),(->,(!(!A)),(!A)))))",
            "(->,(->,(!C),(->,(!A),(->,(!(!A)),(!A)))),(->,(!C),(->,(!(!A)),(!A))))",
            "(->,(!C),(->,(!(!A)),(!A)))",
            "(->,(->,(!(!A)),(!A)),(->,(->,(!(!A)),(!(!A))),(!(!(!A)))))",
            "(->,(->,(->,(!(!A)),(!A)),(->,(->,(!(!A)),(!(!A))),(!(!(!A))))),(->,(!C),(->,(->,(!(!A)),(!A)),(->,(->,(!(!A)),(!(!A))),(!(!(!A)))))))",
            "(->,(->,(!(!A)),(!A)),(->,(->,(!(!A)),(!(!A))),(!(!(!A)))))",
            "(->,(!C),(->,(->,(!(!A)),(!A)),(->,(->,(!(!A)),(!(!A))),(!(!(!A))))))",
            "(->,(->,(!C),(->,(!(!A)),(!A))),(->,(->,(!C),(->,(->,(!(!A)),(!A)),(->,(->,(!(!A)),(!(!A))),(!(!(!A)))))),(->,(!C),(->,(->,(!(!A)),(!(!A))),(!(!(!A)))))))",
            "(->,(->,(!C),(->,(->,(!(!A)),(!A)),(->,(->,(!(!A)),(!(!A))),(!(!(!A)))))),(->,(!C),(->,(->,(!(!A)),(!(!A))),(!(!(!A))))))",
            "(->,(!C),(->,(->,(!(!A)),(!(!A))),(!(!(!A)))))",
            "(->,(->,(!C),(->,(!(!A)),(!(!A)))),(->,(->,(!C),(->,(->,(!(!A)),(!(!A))),(!(!(!A))))),(->,(!C),(!(!(!A))))))",
            "(->,(->,(!C),(->,(->,(!(!A)),(!(!A))),(!(!(!A))))),(->,(!C),(!(!(!A)))))",
            "(->,(!C),(!(!(!A))))",
            "(->,(!C),(!C))",
            "(->,(!(!C)),(->,(->,(!(!C)),(!(!C))),(!(!C))))",
            "(->,(->,(!(!C)),(->,(->,(!(!C)),(!(!C))),(!(!C)))),(->,(!C),(->,(!(!C)),(->,(->,(!(!C)),(!(!C))),(!(!C))))))",
            "(->,(!(!C)),(->,(->,(!(!C)),(!(!C))),(!(!C))))",
            "(->,(!C),(->,(!(!C)),(->,(->,(!(!C)),(!(!C))),(!(!C)))))",
            "(->,(!(!C)),(->,(!(!C)),(!(!C))))",
            "(->,(->,(!(!C)),(->,(!(!C)),(!(!C)))),(->,(!C),(->,(!(!C)),(->,(!(!C)),(!(!C))))))",
            "(->,(!(!C)),(->,(!(!C)),(!(!C))))",
            "(->,(!C),(->,(!(!C)),(->,(!(!C)),(!(!C)))))",
            "(->,(->,(!(!C)),(->,(!(!C)),(!(!C)))),(->,(->,(!(!C)),(->,(->,(!(!C)),(!(!C))),(!(!C)))),(->,(!(!C)),(!(!C)))))",
            "(->,(->,(->,(!(!C)),(->,(!(!C)),(!(!C)))),(->,(->,(!(!C)),(->,(->,(!(!C)),(!(!C))),(!(!C)))),(->,(!(!C)),(!(!C))))),(->,(!C),(->,(->,(!(!C)),(->,(!(!C)),(!(!C)))),(->,(->,(!(!C)),(->,(->,(!(!C)),(!(!C))),(!(!C)))),(->,(!(!C)),(!(!C)))))))",
            "(->,(->,(!(!C)),(->,(!(!C)),(!(!C)))),(->,(->,(!(!C)),(->,(->,(!(!C)),(!(!C))),(!(!C)))),(->,(!(!C)),(!(!C)))))",
            "(->,(!C),(->,(->,(!(!C)),(->,(!(!C)),(!(!C)))),(->,(->,(!(!C)),(->,(->,(!(!C)),(!(!C))),(!(!C)))),(->,(!(!C)),(!(!C))))))",
            "(->,(->,(!C),(->,(!(!C)),(->,(!(!C)),(!(!C))))),(->,(->,(!C),(->,(->,(!(!C)),(->,(!(!C)),(!(!C)))),(->,(->,(!(!C)),(->,(->,(!(!C)),(!(!C))),(!(!C)))),(->,(!(!C)),(!(!C)))))),(->,(!C),(->,(->,(!(!C)),(->,(->,(!(!C)),(!(!C))),(!(!C)))),(->,(!(!C)),(!(!C)))))))",
            "(->,(->,(!C),(->,(->,(!(!C)),(->,(!(!C)),(!(!C)))),(->,(->,(!(!C)),(->,(->,(!(!C)),(!(!C))),(!(!C)))),(->,(!(!C)),(!(!C)))))),(->,(!C),(->,(->,(!(!C)),(->,(->,(!(!C)),(!(!C))),(!(!C)))),(->,(!(!C)),(!(!C))))))",
            "(->,(!C),(->,(->,(!(!C)),(->,(->,(!(!C)),(!(!C))),(!(!C)))),(->,(!(!C)),(!(!C)))))",
            "(->,(->,(!C),(->,(!(!C)),(->,(->,(!(!C)),(!(!C))),(!(!C))))),(->,(->,(!C),(->,(->,(!(!C)),(->,(->,(!(!C)),(!(!C))),(!(!C)))),(->,(!(!C)),(!(!C))))),(->,(!C),(->,(!(!C)),(!(!C))))))",
            "(->,(->,(!C),(->,(->,(!(!C)),(->,(->,(!(!C)),(!(!C))),(!(!C)))),(->,(!(!C)),(!(!C))))),(->,(!C),(->,(!(!C)),(!(!C)))))",
            "(->,(!C),(->,(!(!C)),(!(!C))))",
            "(->,(!C),(->,(!(!C)),(!C)))",
            "(->,(->,(!C),(->,(!(!C)),(!C))),(->,(!C),(->,(!C),(->,(!(!C)),(!C)))))",
            "(->,(!C),(->,(!(!C)),(!C)))",
            "(->,(!C),(->,(!C),(->,(!(!C)),(!C))))",
            "(->,(->,(!C),(!C)),(->,(->,(!C),(->,(!C),(->,(!(!C)),(!C)))),(->,(!C),(->,(!(!C)),(!C)))))",
            "(->,(->,(!C),(->,(!C),(->,(!(!C)),(!C)))),(->,(!C),(->,(!(!C)),(!C))))",
            "(->,(!C),(->,(!(!C)),(!C)))",
            "(->,(->,(!(!C)),(!C)),(->,(->,(!(!C)),(!(!C))),(!(!(!C)))))",
            "(->,(->,(->,(!(!C)),(!C)),(->,(->,(!(!C)),(!(!C))),(!(!(!C))))),(->,(!C),(->,(->,(!(!C)),(!C)),(->,(->,(!(!C)),(!(!C))),(!(!(!C)))))))",
            "(->,(->,(!(!C)),(!C)),(->,(->,(!(!C)),(!(!C))),(!(!(!C)))))",
            "(->,(!C),(->,(->,(!(!C)),(!C)),(->,(->,(!(!C)),(!(!C))),(!(!(!C))))))",
            "(->,(->,(!C),(->,(!(!C)),(!C))),(->,(->,(!C),(->,(->,(!(!C)),(!C)),(->,(->,(!(!C)),(!(!C))),(!(!(!C)))))),(->,(!C),(->,(->,(!(!C)),(!(!C))),(!(!(!C)))))))",
            "(->,(->,(!C),(->,(->,(!(!C)),(!C)),(->,(->,(!(!C)),(!(!C))),(!(!(!C)))))),(->,(!C),(->,(->,(!(!C)),(!(!C))),(!(!(!C))))))",
            "(->,(!C),(->,(->,(!(!C)),(!(!C))),(!(!(!C)))))",
            "(->,(->,(!C),(->,(!(!C)),(!(!C)))),(->,(->,(!C),(->,(->,(!(!C)),(!(!C))),(!(!(!C))))),(->,(!C),(!(!(!C))))))",
            "(->,(->,(!C),(->,(->,(!(!C)),(!(!C))),(!(!(!C))))),(->,(!C),(!(!(!C)))))",
            "(->,(!C),(!(!(!C))))",
            "(->,(!C),(!C))",
            "(->,(!C),(->,(!(!C)),(->,(->,(!(!C)),(!(!C))),(!(!C)))))",
            "(->,(!C),(->,(!(!C)),(->,(!(!C)),(!(!C)))))",
            "(->,(!C),(->,(->,(!(!C)),(->,(!(!C)),(!(!C)))),(->,(->,(!(!C)),(->,(->,(!(!C)),(!(!C))),(!(!C)))),(->,(!(!C)),(!(!C))))))",
            "(->,(!C),(->,(->,(!(!C)),(->,(->,(!(!C)),(!(!C))),(!(!C)))),(->,(!(!C)),(!(!C)))))",
            "(->,(!C),(->,(!(!C)),(!(!C))))",
            "(->,(!C),(->,(!C),(->,(!(!C)),(!C))))",
            "(->,(!C),(->,(!(!C)),(!C)))",
            "(->,(!C),(->,(->,(!(!C)),(!C)),(->,(->,(!(!C)),(!(!C))),(!(!(!C))))))",
            "(->,(!C),(->,(->,(!(!C)),(!(!C))),(!(!(!C)))))",
            "(->,(!C),(!(!(!C))))",
            "(->,(!C),(!(!(!C))))",
            "(->,(!(!(!(!C)))),(->,(->,(!(!(!(!C)))),(!(!(!(!C))))),(!(!(!(!C))))))",
            "(->,(->,(!(!(!(!C)))),(->,(->,(!(!(!(!C)))),(!(!(!(!C))))),(!(!(!(!C)))))),(->,(!C),(->,(!(!(!(!C)))),(->,(->,(!(!(!(!C)))),(!(!(!(!C))))),(!(!(!(!C))))))))",
            "(->,(!(!(!(!C)))),(->,(->,(!(!(!(!C)))),(!(!(!(!C))))),(!(!(!(!C))))))",
            "(->,(!C),(->,(!(!(!(!C)))),(->,(->,(!(!(!(!C)))),(!(!(!(!C))))),(!(!(!(!C)))))))",
            "(->,(!(!(!(!C)))),(->,(!(!(!(!C)))),(!(!(!(!C))))))",
            "(->,(->,(!(!(!(!C)))),(->,(!(!(!(!C)))),(!(!(!(!C)))))),(->,(!C),(->,(!(!(!(!C)))),(->,(!(!(!(!C)))),(!(!(!(!C))))))))",
            "(->,(!(!(!(!C)))),(->,(!(!(!(!C)))),(!(!(!(!C))))))",
            "(->,(!C),(->,(!(!(!(!C)))),(->,(!(!(!(!C)))),(!(!(!(!C)))))))",
            "(->,(->,(!(!(!(!C)))),(->,(!(!(!(!C)))),(!(!(!(!C)))))),(->,(->,(!(!(!(!C)))),(->,(->,(!(!(!(!C)))),(!(!(!(!C))))),(!(!(!(!C)))))),(->,(!(!(!(!C)))),(!(!(!(!C)))))))",
            "(->,(->,(->,(!(!(!(!C)))),(->,(!(!(!(!C)))),(!(!(!(!C)))))),(->,(->,(!(!(!(!C)))),(->,(->,(!(!(!(!C)))),(!(!(!(!C))))),(!(!(!(!C)))))),(->,(!(!(!(!C)))),(!(!(!(!C))))))),(->,(!C),(->,(->,(!(!(!(!C)))),(->,(!(!(!(!C)))),(!(!(!(!C)))))),(->,(->,(!(!(!(!C)))),(->,(->,(!(!(!(!C)))),(!(!(!(!C))))),(!(!(!(!C)))))),(->,(!(!(!(!C)))),(!(!(!(!C)))))))))",
            "(->,(->,(!(!(!(!C)))),(->,(!(!(!(!C)))),(!(!(!(!C)))))),(->,(->,(!(!(!(!C)))),(->,(->,(!(!(!(!C)))),(!(!(!(!C))))),(!(!(!(!C)))))),(->,(!(!(!(!C)))),(!(!(!(!C)))))))",
            "(->,(!C),(->,(->,(!(!(!(!C)))),(->,(!(!(!(!C)))),(!(!(!(!C)))))),(->,(->,(!(!(!(!C)))),(->,(->,(!(!(!(!C)))),(!(!(!(!C))))),(!(!(!(!C)))))),(->,(!(!(!(!C)))),(!(!(!(!C))))))))",
            "(->,(->,(!C),(->,(!(!(!(!C)))),(->,(!(!(!(!C)))),(!(!(!(!C))))))),(->,(->,(!C),(->,(->,(!(!(!(!C)))),(->,(!(!(!(!C)))),(!(!(!(!C)))))),(->,(->,(!(!(!(!C)))),(->,(->,(!(!(!(!C)))),(!(!(!(!C))))),(!(!(!(!C)))))),(->,(!(!(!(!C)))),(!(!(!(!C)))))))),(->,(!C),(->,(->,(!(!(!(!C)))),(->,(->,(!(!(!(!C)))),(!(!(!(!C))))),(!(!(!(!C)))))),(->,(!(!(!(!C)))),(!(!(!(!C)))))))))",
            "(->,(->,(!C),(->,(->,(!(!(!(!C)))),(->,(!(!(!(!C)))),(!(!(!(!C)))))),(->,(->,(!(!(!(!C)))),(->,(->,(!(!(!(!C)))),(!(!(!(!C))))),(!(!(!(!C)))))),(->,(!(!(!(!C)))),(!(!(!(!C)))))))),(->,(!C),(->,(->,(!(!(!(!C)))),(->,(->,(!(!(!(!C)))),(!(!(!(!C))))),(!(!(!(!C)))))),(->,(!(!(!(!C)))),(!(!(!(!C))))))))",
            "(->,(!C),(->,(->,(!(!(!(!C)))),(->,(->,(!(!(!(!C)))),(!(!(!(!C))))),(!(!(!(!C)))))),(->,(!(!(!(!C)))),(!(!(!(!C)))))))",
            "(->,(->,(!C),(->,(!(!(!(!C)))),(->,(->,(!(!(!(!C)))),(!(!(!(!C))))),(!(!(!(!C))))))),(->,(->,(!C),(->,(->,(!(!(!(!C)))),(->,(->,(!(!(!(!C)))),(!(!(!(!C))))),(!(!(!(!C)))))),(->,(!(!(!(!C)))),(!(!(!(!C))))))),(->,(!C),(->,(!(!(!(!C)))),(!(!(!(!C))))))))",
            "(->,(->,(!C),(->,(->,(!(!(!(!C)))),(->,(->,(!(!(!(!C)))),(!(!(!(!C))))),(!(!(!(!C)))))),(->,(!(!(!(!C)))),(!(!(!(!C))))))),(->,(!C),(->,(!(!(!(!C)))),(!(!(!(!C)))))))",
            "(->,(!C),(->,(!(!(!(!C)))),(!(!(!(!C))))))",
            "(->,(!(!(!C))),(->,(!(!(!(!C)))),(!(!(!C)))))",
            "(->,(->,(!(!(!C))),(->,(!(!(!(!C)))),(!(!(!C))))),(->,(!C),(->,(!(!(!C))),(->,(!(!(!(!C)))),(!(!(!C)))))))",
            "(->,(!(!(!C))),(->,(!(!(!(!C)))),(!(!(!C)))))",
            "(->,(!C),(->,(!(!(!C))),(->,(!(!(!(!C)))),(!(!(!C))))))",
            "(->,(->,(!C),(!(!(!C)))),(->,(->,(!C),(->,(!(!(!C))),(->,(!(!(!(!C)))),(!(!(!C)))))),(->,(!C),(->,(!(!(!(!C)))),(!(!(!C)))))))",
            "(->,(->,(!C),(->,(!(!(!C))),(->,(!(!(!(!C)))),(!(!(!C)))))),(->,(!C),(->,(!(!(!(!C)))),(!(!(!C))))))",
            "(->,(!C),(->,(!(!(!(!C)))),(!(!(!C)))))",
            "(->,(->,(!(!(!(!C)))),(!(!(!C)))),(->,(->,(!(!(!(!C)))),(!(!(!(!C))))),(!(!(!(!(!C)))))))",
            "(->,(->,(->,(!(!(!(!C)))),(!(!(!C)))),(->,(->,(!(!(!(!C)))),(!(!(!(!C))))),(!(!(!(!(!C))))))),(->,(!C),(->,(->,(!(!(!(!C)))),(!(!(!C)))),(->,(->,(!(!(!(!C)))),(!(!(!(!C))))),(!(!(!(!(!C)))))))))",
            "(->,(->,(!(!(!(!C)))),(!(!(!C)))),(->,(->,(!(!(!(!C)))),(!(!(!(!C))))),(!(!(!(!(!C)))))))",
            "(->,(!C),(->,(->,(!(!(!(!C)))),(!(!(!C)))),(->,(->,(!(!(!(!C)))),(!(!(!(!C))))),(!(!(!(!(!C))))))))",
            "(->,(->,(!C),(->,(!(!(!(!C)))),(!(!(!C))))),(->,(->,(!C),(->,(->,(!(!(!(!C)))),(!(!(!C)))),(->,(->,(!(!(!(!C)))),(!(!(!(!C))))),(!(!(!(!(!C)))))))),(->,(!C),(->,(->,(!(!(!(!C)))),(!(!(!(!C))))),(!(!(!(!(!C)))))))))",
            "(->,(->,(!C),(->,(->,(!(!(!(!C)))),(!(!(!C)))),(->,(->,(!(!(!(!C)))),(!(!(!(!C))))),(!(!(!(!(!C)))))))),(->,(!C),(->,(->,(!(!(!(!C)))),(!(!(!(!C))))),(!(!(!(!(!C))))))))",
            "(->,(!C),(->,(->,(!(!(!(!C)))),(!(!(!(!C))))),(!(!(!(!(!C)))))))",
            "(->,(->,(!C),(->,(!(!(!(!C)))),(!(!(!(!C)))))),(->,(->,(!C),(->,(->,(!(!(!(!C)))),(!(!(!(!C))))),(!(!(!(!(!C))))))),(->,(!C),(!(!(!(!(!C))))))))",
            "(->,(->,(!C),(->,(->,(!(!(!(!C)))),(!(!(!(!C))))),(!(!(!(!(!C))))))),(->,(!C),(!(!(!(!(!C)))))))",
            "(->,(!C),(!(!(!(!(!C))))))",
            "(->,(!C),(!(!(!(!(!C))))))",
            "(->,(!(!(!(!(!(!C)))))),(->,(->,(!(!(!(!(!(!C)))))),(!(!(!(!(!(!C))))))),(!(!(!(!(!(!C))))))))",
            "(->,(->,(!(!(!(!(!(!C)))))),(->,(->,(!(!(!(!(!(!C)))))),(!(!(!(!(!(!C))))))),(!(!(!(!(!(!C)))))))),(->,(!C),(->,(!(!(!(!(!(!C)))))),(->,(->,(!(!(!(!(!(!C)))))),(!(!(!(!(!(!C))))))),(!(!(!(!(!(!C))))))))))",
            "(->,(!(!(!(!(!(!C)))))),(->,(->,(!(!(!(!(!(!C)))))),(!(!(!(!(!(!C))))))),(!(!(!(!(!(!C))))))))",
            "(->,(!C),(->,(!(!(!(!(!(!C)))))),(->,(->,(!(!(!(!(!(!C)))))),(!(!(!(!(!(!C))))))),(!(!(!(!(!(!C)))))))))",
            "(->,(!(!(!(!(!(!C)))))),(->,(!(!(!(!(!(!C)))))),(!(!(!(!(!(!C))))))))",
            "(->,(->,(!(!(!(!(!(!C)))))),(->,(!(!(!(!(!(!C)))))),(!(!(!(!(!(!C)))))))),(->,(!C),(->,(!(!(!(!(!(!C)))))),(->,(!(!(!(!(!(!C)))))),(!(!(!(!(!(!C))))))))))",
            "(->,(!(!(!(!(!(!C)))))),(->,(!(!(!(!(!(!C)))))),(!(!(!(!(!(!C))))))))",
            "(->,(!C),(->,(!(!(!(!(!(!C)))))),(->,(!(!(!(!(!(!C)))))),(!(!(!(!(!(!C)))))))))",
            "(->,(->,(!(!(!(!(!(!C)))))),(->,(!(!(!(!(!(!C)))))),(!(!(!(!(!(!C)))))))),(->,(->,(!(!(!(!(!(!C)))))),(->,(->,(!(!(!(!(!(!C)))))),(!(!(!(!(!(!C))))))),(!(!(!(!(!(!C)))))))),(->,(!(!(!(!(!(!C)))))),(!(!(!(!(!(!C)))))))))",
            "(->,(->,(->,(!(!(!(!(!(!C)))))),(->,(!(!(!(!(!(!C)))))),(!(!(!(!(!(!C)))))))),(->,(->,(!(!(!(!(!(!C)))))),(->,(->,(!(!(!(!(!(!C)))))),(!(!(!(!(!(!C))))))),(!(!(!(!(!(!C)))))))),(->,(!(!(!(!(!(!C)))))),(!(!(!(!(!(!C))))))))),(->,(!C),(->,(->,(!(!(!(!(!(!C)))))),(->,(!(!(!(!(!(!C)))))),(!(!(!(!(!(!C)))))))),(->,(->,(!(!(!(!(!(!C)))))),(->,(->,(!(!(!(!(!(!C)))))),(!(!(!(!(!(!C))))))),(!(!(!(!(!(!C)))))))),(->,(!(!(!(!(!(!C)))))),(!(!(!(!(!(!C)))))))))))",
            "(->,(->,(!(!(!(!(!(!C)))))),(->,(!(!(!(!(!(!C)))))),(!(!(!(!(!(!C)))))))),(->,(->,(!(!(!(!(!(!C)))))),(->,(->,(!(!(!(!(!(!C)))))),(!(!(!(!(!(!C))))))),(!(!(!(!(!(!C)))))))),(->,(!(!(!(!(!(!C)))))),(!(!(!(!(!(!C)))))))))",
            "(->,(!C),(->,(->,(!(!(!(!(!(!C)))))),(->,(!(!(!(!(!(!C)))))),(!(!(!(!(!(!C)))))))),(->,(->,(!(!(!(!(!(!C)))))),(->,(->,(!(!(!(!(!(!C)))))),(!(!(!(!(!(!C))))))),(!(!(!(!(!(!C)))))))),(->,(!(!(!(!(!(!C)))))),(!(!(!(!(!(!C))))))))))",
            "(->,(->,(!C),(->,(!(!(!(!(!(!C)))))),(->,(!(!(!(!(!(!C)))))),(!(!(!(!(!(!C))))))))),(->,(->,(!C),(->,(->,(!(!(!(!(!(!C)))))),(->,(!(!(!(!(!(!C)))))),(!(!(!(!(!(!C)))))))),(->,(->,(!(!(!(!(!(!C)))))),(->,(->,(!(!(!(!(!(!C)))))),(!(!(!(!(!(!C))))))),(!(!(!(!(!(!C)))))))),(->,(!(!(!(!(!(!C)))))),(!(!(!(!(!(!C)))))))))),(->,(!C),(->,(->,(!(!(!(!(!(!C)))))),(->,(->,(!(!(!(!(!(!C)))))),(!(!(!(!(!(!C))))))),(!(!(!(!(!(!C)))))))),(->,(!(!(!(!(!(!C)))))),(!(!(!(!(!(!C)))))))))))",
            "(->,(->,(!C),(->,(->,(!(!(!(!(!(!C)))))),(->,(!(!(!(!(!(!C)))))),(!(!(!(!(!(!C)))))))),(->,(->,(!(!(!(!(!(!C)))))),(->,(->,(!(!(!(!(!(!C)))))),(!(!(!(!(!(!C))))))),(!(!(!(!(!(!C)))))))),(->,(!(!(!(!(!(!C)))))),(!(!(!(!(!(!C)))))))))),(->,(!C),(->,(->,(!(!(!(!(!(!C)))))),(->,(->,(!(!(!(!(!(!C)))))),(!(!(!(!(!(!C))))))),(!(!(!(!(!(!C)))))))),(->,(!(!(!(!(!(!C)))))),(!(!(!(!(!(!C))))))))))",
            "(->,(!C),(->,(->,(!(!(!(!(!(!C)))))),(->,(->,(!(!(!(!(!(!C)))))),(!(!(!(!(!(!C))))))),(!(!(!(!(!(!C)))))))),(->,(!(!(!(!(!(!C)))))),(!(!(!(!(!(!C)))))))))",
            "(->,(->,(!C),(->,(!(!(!(!(!(!C)))))),(->,(->,(!(!(!(!(!(!C)))))),(!(!(!(!(!(!C))))))),(!(!(!(!(!(!C))))))))),(->,(->,(!C),(->,(->,(!(!(!(!(!(!C)))))),(->,(->,(!(!(!(!(!(!C)))))),(!(!(!(!(!(!C))))))),(!(!(!(!(!(!C)))))))),(->,(!(!(!(!(!(!C)))))),(!(!(!(!(!(!C))))))))),(->,(!C),(->,(!(!(!(!(!(!C)))))),(!(!(!(!(!(!C))))))))))",
            "(->,(->,(!C),(->,(->,(!(!(!(!(!(!C)))))),(->,(->,(!(!(!(!(!(!C)))))),(!(!(!(!(!(!C))))))),(!(!(!(!(!(!C)))))))),(->,(!(!(!(!(!(!C)))))),(!(!(!(!(!(!C))))))))),(->,(!C),(->,(!(!(!(!(!(!C)))))),(!(!(!(!(!(!C)))))))))",
            "(->,(!C),(->,(!(!(!(!(!(!C)))))),(!(!(!(!(!(!C))))))))",
            "(->,(!(!(!(!(!C))))),(->,(!(!(!(!(!(!C)))))),(!(!(!(!(!C)))))))",
            "(->,(->,(!(!(!(!(!C))))),(->,(!(!(!(!(!(!C)))))),(!(!(!(!(!C))))))),(->,(!C),(->,(!(!(!(!(!C))))),(->,(!(!(!(!(!(!C)))))),(!(!(!(!(!C)))))))))",
            "(->,(!(!(!(!(!C))))),(->,(!(!(!(!(!(!C)))))),(!(!(!(!(!C)))))))",
            "(->,(!C),(->,(!(!(!(!(!C))))),(->,(!(!(!(!(!(!C)))))),(!(!(!(!(!C))))))))",
            "(->,(->,(!C),(!(!(!(!(!C)))))),(->,(->,(!C),(->,(!(!(!(!(!C))))),(->,(!(!(!(!(!(!C)))))),(!(!(!(!(!C)))))))),(->,(!C),(->,(!(!(!(!(!(!C)))))),(!(!(!(!(!C)))))))))",
            "(->,(->,(!C),(->,(!(!(!(!(!C))))),(->,(!(!(!(!(!(!C)))))),(!(!(!(!(!C)))))))),(->,(!C),(->,(!(!(!(!(!(!C)))))),(!(!(!(!(!C))))))))",
            "(->,(!C),(->,(!(!(!(!(!(!C)))))),(!(!(!(!(!C)))))))",
            "(->,(->,(!(!(!(!(!(!C)))))),(!(!(!(!(!C)))))),(->,(->,(!(!(!(!(!(!C)))))),(!(!(!(!(!(!C))))))),(!(!(!(!(!(!(!C)))))))))",
            "(->,(->,(->,(!(!(!(!(!(!C)))))),(!(!(!(!(!C)))))),(->,(->,(!(!(!(!(!(!C)))))),(!(!(!(!(!(!C))))))),(!(!(!(!(!(!(!C))))))))),(->,(!C),(->,(->,(!(!(!(!(!(!C)))))),(!(!(!(!(!C)))))),(->,(->,(!(!(!(!(!(!C)))))),(!(!(!(!(!(!C))))))),(!(!(!(!(!(!(!C)))))))))))",
            "(->,(->,(!(!(!(!(!(!C)))))),(!(!(!(!(!C)))))),(->,(->,(!(!(!(!(!(!C)))))),(!(!(!(!(!(!C))))))),(!(!(!(!(!(!(!C)))))))))",
            "(->,(!C),(->,(->,(!(!(!(!(!(!C)))))),(!(!(!(!(!C)))))),(->,(->,(!(!(!(!(!(!C)))))),(!(!(!(!(!(!C))))))),(!(!(!(!(!(!(!C))))))))))",
            "(->,(->,(!C),(->,(!(!(!(!(!(!C)))))),(!(!(!(!(!C))))))),(->,(->,(!C),(->,(->,(!(!(!(!(!(!C)))))),(!(!(!(!(!C)))))),(->,(->,(!(!(!(!(!(!C)))))),(!(!(!(!(!(!C))))))),(!(!(!(!(!(!(!C)))))))))),(->,(!C),(->,(->,(!(!(!(!(!(!C)))))),(!(!(!(!(!(!C))))))),(!(!(!(!(!(!(!C)))))))))))",
            "(->,(->,(!C),(->,(->,(!(!(!(!(!(!C)))))),(!(!(!(!(!C)))))),(->,(->,(!(!(!(!(!(!C)))))),(!(!(!(!(!(!C))))))),(!(!(!(!(!(!(!C)))))))))),(->,(!C),(->,(->,(!(!(!(!(!(!C)))))),(!(!(!(!(!(!C))))))),(!(!(!(!(!(!(!C))))))))))",
            "(->,(!C),(->,(->,(!(!(!(!(!(!C)))))),(!(!(!(!(!(!C))))))),(!(!(!(!(!(!(!C)))))))))",
            "(->,(->,(!C),(->,(!(!(!(!(!(!C)))))),(!(!(!(!(!(!C)))))))),(->,(->,(!C),(->,(->,(!(!(!(!(!(!C)))))),(!(!(!(!(!(!C))))))),(!(!(!(!(!(!(!C))))))))),(->,(!C),(!(!(!(!(!(!(!C))))))))))",
            "(->,(->,(!C),(->,(->,(!(!(!(!(!(!C)))))),(!(!(!(!(!(!C))))))),(!(!(!(!(!(!(!C))))))))),(->,(!C),(!(!(!(!(!(!(!C)))))))))",
            "(->,(!C),(!(!(!(!(!(!(!C))))))))",
            "(->,(!C),(!(!(!(!(!(!(!C))))))))",
            "(->,(!(!(!(!(!(!(!(!C)))))))),(->,(->,(!(!(!(!(!(!(!(!C)))))))),(!(!(!(!(!(!(!(!C))))))))),(!(!(!(!(!(!(!(!C))))))))))",
            "(->,(->,(!(!(!(!(!(!(!(!C)))))))),(->,(->,(!(!(!(!(!(!(!(!C)))))))),(!(!(!(!(!(!(!(!C))))))))),(!(!(!(!(!(!(!(!C)))))))))),(->,(!C),(->,(!(!(!(!(!(!(!(!C)))))))),(->,(->,(!(!(!(!(!(!(!(!C)))))))),(!(!(!(!(!(!(!(!C))))))))),(!(!(!(!(!(!(!(!C))))))))))))",
            "(->,(!(!(!(!(!(!(!(!C)))))))),(->,(->,(!(!(!(!(!(!(!(!C)))))))),(!(!(!(!(!(!(!(!C))))))))),(!(!(!(!(!(!(!(!C))))))))))",
            "(->,(!C),(->,(!(!(!(!(!(!(!(!C)))))))),(->,(->,(!(!(!(!(!(!(!(!C)))))))),(!(!(!(!(!(!(!(!C))))))))),(!(!(!(!(!(!(!(!C)))))))))))",
            "(->,(!(!(!(!(!(!(!(!C)))))))),(->,(!(!(!(!(!(!(!(!C)))))))),(!(!(!(!(!(!(!(!C))))))))))",
            "(->,(->,(!(!(!(!(!(!(!(!C)))))))),(->,(!(!(!(!(!(!(!(!C)))))))),(!(!(!(!(!(!(!(!C)))))))))),(->,(!C),(->,(!(!(!(!(!(!(!(!C)))))))),(->,(!(!(!(!(!(!(!(!C)))))))),(!(!(!(!(!(!(!(!C))))))))))))",
            "(->,(!(!(!(!(!(!(!(!C)))))))),(->,(!(!(!(!(!(!(!(!C)))))))),(!(!(!(!(!(!(!(!C))))))))))",
            "(->,(!C),(->,(!(!(!(!(!(!(!(!C)))))))),(->,(!(!(!(!(!(!(!(!C)))))))),(!(!(!(!(!(!(!(!C)))))))))))",
            "(->,(->,(!(!(!(!(!(!(!(!C)))))))),(->,(!(!(!(!(!(!(!(!C)))))))),(!(!(!(!(!(!(!(!C)))))))))),(->,(->,(!(!(!(!(!(!(!(!C)))))))),(->,(->,(!(!(!(!(!(!(!(!C)))))))),(!(!(!(!(!(!(!(!C))))))))),(!(!(!(!(!(!(!(!C)))))))))),(->,(!(!(!(!(!(!(!(!C)))))))),(!(!(!(!(!(!(!(!C)))))))))))",

            "(->,(->,(!(!(!(!(!(!(!(!C)))))))),(->,(!(!(!(!(!(!(!(!C)))))))),(!(!(!(!(!(!(!(!C)))))))))),(->,(->,(!(!(!(!(!(!(!(!C)))))))),(->,(->,(!(!(!(!(!(!(!(!C)))))))),(!(!(!(!(!(!(!(!C))))))))),(!(!(!(!(!(!(!(!C)))))))))),(->,(!(!(!(!(!(!(!(!C)))))))),(!(!(!(!(!(!(!(!C)))))))))))",
            "(->,(!C),(->,(->,(!(!(!(!(!(!(!(!C)))))))),(->,(!(!(!(!(!(!(!(!C)))))))),(!(!(!(!(!(!(!(!C)))))))))),(->,(->,(!(!(!(!(!(!(!(!C)))))))),(->,(->,(!(!(!(!(!(!(!(!C)))))))),(!(!(!(!(!(!(!(!C))))))))),(!(!(!(!(!(!(!(!C)))))))))),(->,(!(!(!(!(!(!(!(!C)))))))),(!(!(!(!(!(!(!(!C))))))))))))",

            "(->,(->,(!C),(->,(->,(!(!(!(!(!(!(!(!C)))))))),(->,(!(!(!(!(!(!(!(!C)))))))),(!(!(!(!(!(!(!(!C)))))))))),(->,(->,(!(!(!(!(!(!(!(!C)))))))),(->,(->,(!(!(!(!(!(!(!(!C)))))))),(!(!(!(!(!(!(!(!C))))))))),(!(!(!(!(!(!(!(!C)))))))))),(->,(!(!(!(!(!(!(!(!C)))))))),(!(!(!(!(!(!(!(!C)))))))))))),(->,(!C),(->,(->,(!(!(!(!(!(!(!(!C)))))))),(->,(->,(!(!(!(!(!(!(!(!C)))))))),(!(!(!(!(!(!(!(!C))))))))),(!(!(!(!(!(!(!(!C)))))))))),(->,(!(!(!(!(!(!(!(!C)))))))),(!(!(!(!(!(!(!(!C))))))))))))",
            "(->,(!C),(->,(->,(!(!(!(!(!(!(!(!C)))))))),(->,(->,(!(!(!(!(!(!(!(!C)))))))),(!(!(!(!(!(!(!(!C))))))))),(!(!(!(!(!(!(!(!C)))))))))),(->,(!(!(!(!(!(!(!(!C)))))))),(!(!(!(!(!(!(!(!C)))))))))))",
            "(->,(->,(!C),(->,(!(!(!(!(!(!(!(!C)))))))),(->,(->,(!(!(!(!(!(!(!(!C)))))))),(!(!(!(!(!(!(!(!C))))))))),(!(!(!(!(!(!(!(!C))))))))))),(->,(->,(!C),(->,(->,(!(!(!(!(!(!(!(!C)))))))),(->,(->,(!(!(!(!(!(!(!(!C)))))))),(!(!(!(!(!(!(!(!C))))))))),(!(!(!(!(!(!(!(!C)))))))))),(->,(!(!(!(!(!(!(!(!C)))))))),(!(!(!(!(!(!(!(!C))))))))))),(->,(!C),(->,(!(!(!(!(!(!(!(!C)))))))),(!(!(!(!(!(!(!(!C))))))))))))",
            "(->,(->,(!C),(->,(->,(!(!(!(!(!(!(!(!C)))))))),(->,(->,(!(!(!(!(!(!(!(!C)))))))),(!(!(!(!(!(!(!(!C))))))))),(!(!(!(!(!(!(!(!C)))))))))),(->,(!(!(!(!(!(!(!(!C)))))))),(!(!(!(!(!(!(!(!C))))))))))),(->,(!C),(->,(!(!(!(!(!(!(!(!C)))))))),(!(!(!(!(!(!(!(!C)))))))))))",
            "(->,(!C),(->,(!(!(!(!(!(!(!(!C)))))))),(!(!(!(!(!(!(!(!C))))))))))",
            "(->,(!(!(!(!(!(!(!C))))))),(->,(!(!(!(!(!(!(!(!C)))))))),(!(!(!(!(!(!(!C)))))))))",
            "(->,(->,(!(!(!(!(!(!(!C))))))),(->,(!(!(!(!(!(!(!(!C)))))))),(!(!(!(!(!(!(!C))))))))),(->,(!C),(->,(!(!(!(!(!(!(!C))))))),(->,(!(!(!(!(!(!(!(!C)))))))),(!(!(!(!(!(!(!C)))))))))))",
            "(->,(!(!(!(!(!(!(!C))))))),(->,(!(!(!(!(!(!(!(!C)))))))),(!(!(!(!(!(!(!C)))))))))",
            "(->,(!C),(->,(!(!(!(!(!(!(!C))))))),(->,(!(!(!(!(!(!(!(!C)))))))),(!(!(!(!(!(!(!C))))))))))",
            "(->,(->,(!C),(!(!(!(!(!(!(!C)))))))),(->,(->,(!C),(->,(!(!(!(!(!(!(!C))))))),(->,(!(!(!(!(!(!(!(!C)))))))),(!(!(!(!(!(!(!C)))))))))),(->,(!C),(->,(!(!(!(!(!(!(!(!C)))))))),(!(!(!(!(!(!(!C)))))))))))",
            "(->,(->,(!C),(->,(!(!(!(!(!(!(!C))))))),(->,(!(!(!(!(!(!(!(!C)))))))),(!(!(!(!(!(!(!C)))))))))),(->,(!C),(->,(!(!(!(!(!(!(!(!C)))))))),(!(!(!(!(!(!(!C))))))))))",
            "(->,(!C),(->,(!(!(!(!(!(!(!(!C)))))))),(!(!(!(!(!(!(!C)))))))))",
            "(->,(->,(!(!(!(!(!(!(!(!C)))))))),(!(!(!(!(!(!(!C)))))))),(->,(->,(!(!(!(!(!(!(!(!C)))))))),(!(!(!(!(!(!(!(!C))))))))),(!(!(!(!(!(!(!(!(!C)))))))))))",
            "(->,(->,(->,(!(!(!(!(!(!(!(!C)))))))),(!(!(!(!(!(!(!C)))))))),(->,(->,(!(!(!(!(!(!(!(!C)))))))),(!(!(!(!(!(!(!(!C))))))))),(!(!(!(!(!(!(!(!(!C))))))))))),(->,(!C),(->,(->,(!(!(!(!(!(!(!(!C)))))))),(!(!(!(!(!(!(!C)))))))),(->,(->,(!(!(!(!(!(!(!(!C)))))))),(!(!(!(!(!(!(!(!C))))))))),(!(!(!(!(!(!(!(!(!C)))))))))))))",
            "(->,(->,(!(!(!(!(!(!(!(!C)))))))),(!(!(!(!(!(!(!C)))))))),(->,(->,(!(!(!(!(!(!(!(!C)))))))),(!(!(!(!(!(!(!(!C))))))))),(!(!(!(!(!(!(!(!(!C)))))))))))",
            "(->,(!C),(->,(->,(!(!(!(!(!(!(!(!C)))))))),(!(!(!(!(!(!(!C)))))))),(->,(->,(!(!(!(!(!(!(!(!C)))))))),(!(!(!(!(!(!(!(!C))))))))),(!(!(!(!(!(!(!(!(!C))))))))))))",
            "(->,(->,(!C),(->,(!(!(!(!(!(!(!(!C)))))))),(!(!(!(!(!(!(!C))))))))),(->,(->,(!C),(->,(->,(!(!(!(!(!(!(!(!C)))))))),(!(!(!(!(!(!(!C)))))))),(->,(->,(!(!(!(!(!(!(!(!C)))))))),(!(!(!(!(!(!(!(!C))))))))),(!(!(!(!(!(!(!(!(!C)))))))))))),(->,(!C),(->,(->,(!(!(!(!(!(!(!(!C)))))))),(!(!(!(!(!(!(!(!C))))))))),(!(!(!(!(!(!(!(!(!C)))))))))))))",
            "(->,(->,(!C),(->,(->,(!(!(!(!(!(!(!(!C)))))))),(!(!(!(!(!(!(!C)))))))),(->,(->,(!(!(!(!(!(!(!(!C)))))))),(!(!(!(!(!(!(!(!C))))))))),(!(!(!(!(!(!(!(!(!C)))))))))))),(->,(!C),(->,(->,(!(!(!(!(!(!(!(!C)))))))),(!(!(!(!(!(!(!(!C))))))))),(!(!(!(!(!(!(!(!(!C))))))))))))",
            "(->,(!C),(->,(->,(!(!(!(!(!(!(!(!C)))))))),(!(!(!(!(!(!(!(!C))))))))),(!(!(!(!(!(!(!(!(!C)))))))))))",
            "(->,(->,(!C),(->,(!(!(!(!(!(!(!(!C)))))))),(!(!(!(!(!(!(!(!C)))))))))),(->,(->,(!C),(->,(->,(!(!(!(!(!(!(!(!C)))))))),(!(!(!(!(!(!(!(!C))))))))),(!(!(!(!(!(!(!(!(!C))))))))))),(->,(!C),(!(!(!(!(!(!(!(!(!C))))))))))))",
            "(->,(->,(!C),(->,(->,(!(!(!(!(!(!(!(!C)))))))),(!(!(!(!(!(!(!(!C))))))))),(!(!(!(!(!(!(!(!(!C))))))))))),(->,(!C),(!(!(!(!(!(!(!(!(!C)))))))))))",
            "(->,(!C),(!(!(!(!(!(!(!(!(!C))))))))))",
            "(->,(!(!(!(!(!(!(!(!(!C))))))))),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))",
            "(->,(->,(!(!(!(!(!(!(!(!(!C))))))))),(->,B,(!(!(!(!(!(!(!(!(!C))))))))))),(->,(!C),(->,(!(!(!(!(!(!(!(!(!C))))))))),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))))",
            "(->,(!(!(!(!(!(!(!(!(!C))))))))),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))",
            "(->,(!C),(->,(!(!(!(!(!(!(!(!(!C))))))))),(->,B,(!(!(!(!(!(!(!(!(!C))))))))))))",
            "(->,(!C),(!(!(!(!(!(!(!(!(!C))))))))))",
            "(->,(->,(!C),(!(!(!(!(!(!(!(!(!C)))))))))),(->,(->,(!C),(->,(!(!(!(!(!(!(!(!(!C))))))))),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(->,(!C),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))))",
            "(->,(->,(!C),(->,(!(!(!(!(!(!(!(!(!C))))))))),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(->,(!C),(->,B,(!(!(!(!(!(!(!(!(!C))))))))))))",
            "(->,(!C),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))",
            "(->,(->,B,(!(!(!(!(!(!(!(!(!C)))))))))),(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C))))))))))))",
            "(->,(->,(->,B,(!(!(!(!(!(!(!(!(!C)))))))))),(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(->,(!C),(->,(->,B,(!(!(!(!(!(!(!(!(!C)))))))))),(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C))))))))))))))",
            "(->,(->,B,(!(!(!(!(!(!(!(!(!C)))))))))),(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C))))))))))))",
            "(->,(!C),(->,(->,B,(!(!(!(!(!(!(!(!(!C)))))))))),(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))))",
            "(->,(!C),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))",
            "(->,(->,(!C),(->,B,(!(!(!(!(!(!(!(!(!C))))))))))),(->,(->,(!C),(->,(->,B,(!(!(!(!(!(!(!(!(!C)))))))))),(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C))))))))))))),(->,(!C),(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C))))))))))))))",
            "(->,(->,(!C),(->,(->,B,(!(!(!(!(!(!(!(!(!C)))))))))),(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C))))))))))))),(->,(!C),(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))))",
            "(->,(!C),(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C))))))))))))",
            "(->,(!C),(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C))))))))))))",
            "(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(->,(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C))))))))))))),(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C))))))))))))))",
            "(->,(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(->,(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C))))))))))))),(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))))),(->,(!C),(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(->,(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C))))))))))))),(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C))))))))))))))))",
            "(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(->,(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C))))))))))))),(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C))))))))))))))",
            "(->,(!C),(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(->,(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C))))))))))))),(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))))))",
            "(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C))))))))))))))",
            "(->,(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))))),(->,(!C),(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C))))))))))))))))",
            "(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C))))))))))))))",
            "(->,(!C),(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))))))",
            "(->,(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))))),(->,(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(->,(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C))))))))))))),(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))))),(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))))))",

            "(->,(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))))),(->,(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(->,(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C))))))))))))),(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))))),(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))))))",


            "(->,(->,(!C),(->,(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))))),(->,(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(->,(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C))))))))))))),(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))))),(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))))))),(->,(!C),(->,(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(->,(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C))))))))))))),(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))))),(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C))))))))))))))))",
            "(->,(!C),(->,(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(->,(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C))))))))))))),(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))))),(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))))))",

            "(->,(->,(!C),(->,(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(->,(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C))))))))))))),(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))))),(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C))))))))))))))),(->,(!C),(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))))))",
            "(->,(!C),(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C))))))))))))))",
            "(->,(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C))))))))))),(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))))",
            "(->,(->,(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C))))))))))),(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C))))))))))))),(->,(!C),(->,(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C))))))))))),(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))))))",
            "(->,(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C))))))))))),(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))))",
            "(->,(!C),(->,(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C))))))))))),(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C))))))))))))))",
            "(->,(->,(!C),(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(->,(->,(!C),(->,(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C))))))))))),(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))))),(->,(!C),(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))))))",
            "(->,(->,(!C),(->,(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C))))))))))),(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))))),(->,(!C),(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C))))))))))))))",
            "(->,(!C),(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))))",
            "(->,(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(->,(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C))))))))))))),(!(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))))))",

            "(->,(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(->,(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C))))))))))))),(!(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))))))",
            "(->,(!C),(->,(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(->,(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C))))))))))))),(!(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C))))))))))))))))",

            "(->,(->,(!C),(->,(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(->,(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C))))))))))))),(!(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))))))),(->,(!C),(->,(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C))))))))))))),(!(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C))))))))))))))))",
            "(->,(!C),(->,(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C))))))))))))),(!(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))))))",
            "(->,(->,(!C),(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))))),(->,(->,(!C),(->,(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C))))))))))))),(!(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C))))))))))))))),(->,(!C),(!(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C))))))))))))))))",
            "(->,(->,(!C),(->,(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C))))))))))))),(!(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C))))))))))))))),(->,(!C),(!(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))))))",
            "(->,(!C),(!(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C))))))))))))))",
            "(!B)",
            "(->,(!B),(->,C,(!B)))",
            "(!B)",
            "(->,C,(!B))",
            "(!A)",
            "(->,(!A),(->,C,(!A)))",
            "(!A)",
            "(->,C,(!A))",
            "(->,C,(->,C,C))",
            "(->,(->,C,(->,C,C)),(->,(->,C,(->,(->,C,C),C)),(->,C,C)))",
            "(->,(->,C,(->,(->,C,C),C)),(->,C,C))",
            "(->,C,(->,(->,C,C),C))",
            "(->,C,C)",
            "(->,C,(!A))",
            "(->,(!(!A)),(->,(->,(!(!A)),(!(!A))),(!(!A))))",
            "(->,(->,(!(!A)),(->,(->,(!(!A)),(!(!A))),(!(!A)))),(->,C,(->,(!(!A)),(->,(->,(!(!A)),(!(!A))),(!(!A))))))",
            "(->,(!(!A)),(->,(->,(!(!A)),(!(!A))),(!(!A))))",
            "(->,C,(->,(!(!A)),(->,(->,(!(!A)),(!(!A))),(!(!A)))))",
            "(->,(!(!A)),(->,(!(!A)),(!(!A))))",
            "(->,(->,(!(!A)),(->,(!(!A)),(!(!A)))),(->,C,(->,(!(!A)),(->,(!(!A)),(!(!A))))))",
            "(->,(!(!A)),(->,(!(!A)),(!(!A))))",
            "(->,C,(->,(!(!A)),(->,(!(!A)),(!(!A)))))",
            "(->,(->,(!(!A)),(->,(!(!A)),(!(!A)))),(->,(->,(!(!A)),(->,(->,(!(!A)),(!(!A))),(!(!A)))),(->,(!(!A)),(!(!A)))))",
            "(->,(->,(->,(!(!A)),(->,(!(!A)),(!(!A)))),(->,(->,(!(!A)),(->,(->,(!(!A)),(!(!A))),(!(!A)))),(->,(!(!A)),(!(!A))))),(->,C,(->,(->,(!(!A)),(->,(!(!A)),(!(!A)))),(->,(->,(!(!A)),(->,(->,(!(!A)),(!(!A))),(!(!A)))),(->,(!(!A)),(!(!A)))))))",
            "(->,(->,(!(!A)),(->,(!(!A)),(!(!A)))),(->,(->,(!(!A)),(->,(->,(!(!A)),(!(!A))),(!(!A)))),(->,(!(!A)),(!(!A)))))",
            "(->,C,(->,(->,(!(!A)),(->,(!(!A)),(!(!A)))),(->,(->,(!(!A)),(->,(->,(!(!A)),(!(!A))),(!(!A)))),(->,(!(!A)),(!(!A))))))",
            "(->,(->,C,(->,(!(!A)),(->,(!(!A)),(!(!A))))),(->,(->,C,(->,(->,(!(!A)),(->,(!(!A)),(!(!A)))),(->,(->,(!(!A)),(->,(->,(!(!A)),(!(!A))),(!(!A)))),(->,(!(!A)),(!(!A)))))),(->,C,(->,(->,(!(!A)),(->,(->,(!(!A)),(!(!A))),(!(!A)))),(->,(!(!A)),(!(!A)))))))",
            "(->,(->,C,(->,(->,(!(!A)),(->,(!(!A)),(!(!A)))),(->,(->,(!(!A)),(->,(->,(!(!A)),(!(!A))),(!(!A)))),(->,(!(!A)),(!(!A)))))),(->,C,(->,(->,(!(!A)),(->,(->,(!(!A)),(!(!A))),(!(!A)))),(->,(!(!A)),(!(!A))))))",
            "(->,C,(->,(->,(!(!A)),(->,(->,(!(!A)),(!(!A))),(!(!A)))),(->,(!(!A)),(!(!A)))))",
            "(->,(->,C,(->,(!(!A)),(->,(->,(!(!A)),(!(!A))),(!(!A))))),(->,(->,C,(->,(->,(!(!A)),(->,(->,(!(!A)),(!(!A))),(!(!A)))),(->,(!(!A)),(!(!A))))),(->,C,(->,(!(!A)),(!(!A))))))",
            "(->,(->,C,(->,(->,(!(!A)),(->,(->,(!(!A)),(!(!A))),(!(!A)))),(->,(!(!A)),(!(!A))))),(->,C,(->,(!(!A)),(!(!A)))))",
            "(->,C,(->,(!(!A)),(!(!A))))",
            "(->,(!A),(->,(!(!A)),(!A)))",
            "(->,(->,(!A),(->,(!(!A)),(!A))),(->,C,(->,(!A),(->,(!(!A)),(!A)))))",
            "(->,(!A),(->,(!(!A)),(!A)))",
            "(->,C,(->,(!A),(->,(!(!A)),(!A))))",
            "(->,(->,C,(!A)),(->,(->,C,(->,(!A),(->,(!(!A)),(!A)))),(->,C,(->,(!(!A)),(!A)))))",
            "(->,(->,C,(->,(!A),(->,(!(!A)),(!A)))),(->,C,(->,(!(!A)),(!A))))",
            "(->,C,(->,(!(!A)),(!A)))",
            "(->,(->,(!(!A)),(!A)),(->,(->,(!(!A)),(!(!A))),(!(!(!A)))))",
            "(->,(->,(->,(!(!A)),(!A)),(->,(->,(!(!A)),(!(!A))),(!(!(!A))))),(->,C,(->,(->,(!(!A)),(!A)),(->,(->,(!(!A)),(!(!A))),(!(!(!A)))))))",
            "(->,(->,(!(!A)),(!A)),(->,(->,(!(!A)),(!(!A))),(!(!(!A)))))",
            "(->,C,(->,(->,(!(!A)),(!A)),(->,(->,(!(!A)),(!(!A))),(!(!(!A))))))",
            "(->,(->,C,(->,(!(!A)),(!A))),(->,(->,C,(->,(->,(!(!A)),(!A)),(->,(->,(!(!A)),(!(!A))),(!(!(!A)))))),(->,C,(->,(->,(!(!A)),(!(!A))),(!(!(!A)))))))",
            "(->,(->,C,(->,(->,(!(!A)),(!A)),(->,(->,(!(!A)),(!(!A))),(!(!(!A)))))),(->,C,(->,(->,(!(!A)),(!(!A))),(!(!(!A))))))",
            "(->,C,(->,(->,(!(!A)),(!(!A))),(!(!(!A)))))",
            "(->,(->,C,(->,(!(!A)),(!(!A)))),(->,(->,C,(->,(->,(!(!A)),(!(!A))),(!(!(!A))))),(->,C,(!(!(!A))))))",
            "(->,(->,C,(->,(->,(!(!A)),(!(!A))),(!(!(!A))))),(->,C,(!(!(!A)))))",
            "(->,C,(!(!(!A))))",
            "(->,C,C)",
            "(->,C,C)",
            "(->,(!C),(->,(->,(!C),(!C)),(!C)))",
            "(->,(->,(!C),(->,(->,(!C),(!C)),(!C))),(->,C,(->,(!C),(->,(->,(!C),(!C)),(!C)))))",
            "(->,(!C),(->,(->,(!C),(!C)),(!C)))",
            "(->,C,(->,(!C),(->,(->,(!C),(!C)),(!C))))",
            "(->,(!C),(->,(!C),(!C)))",
            "(->,(->,(!C),(->,(!C),(!C))),(->,C,(->,(!C),(->,(!C),(!C)))))",
            "(->,(!C),(->,(!C),(!C)))",
            "(->,C,(->,(!C),(->,(!C),(!C))))",
            "(->,(->,(!C),(->,(!C),(!C))),(->,(->,(!C),(->,(->,(!C),(!C)),(!C))),(->,(!C),(!C))))",
            "(->,(->,(->,(!C),(->,(!C),(!C))),(->,(->,(!C),(->,(->,(!C),(!C)),(!C))),(->,(!C),(!C)))),(->,C,(->,(->,(!C),(->,(!C),(!C))),(->,(->,(!C),(->,(->,(!C),(!C)),(!C))),(->,(!C),(!C))))))",
            "(->,(->,(!C),(->,(!C),(!C))),(->,(->,(!C),(->,(->,(!C),(!C)),(!C))),(->,(!C),(!C))))",
            "(->,C,(->,(->,(!C),(->,(!C),(!C))),(->,(->,(!C),(->,(->,(!C),(!C)),(!C))),(->,(!C),(!C)))))",
            "(->,(->,C,(->,(!C),(->,(!C),(!C)))),(->,(->,C,(->,(->,(!C),(->,(!C),(!C))),(->,(->,(!C),(->,(->,(!C),(!C)),(!C))),(->,(!C),(!C))))),(->,C,(->,(->,(!C),(->,(->,(!C),(!C)),(!C))),(->,(!C),(!C))))))",
            "(->,(->,C,(->,(->,(!C),(->,(!C),(!C))),(->,(->,(!C),(->,(->,(!C),(!C)),(!C))),(->,(!C),(!C))))),(->,C,(->,(->,(!C),(->,(->,(!C),(!C)),(!C))),(->,(!C),(!C)))))",
            "(->,C,(->,(->,(!C),(->,(->,(!C),(!C)),(!C))),(->,(!C),(!C))))",
            "(->,(->,C,(->,(!C),(->,(->,(!C),(!C)),(!C)))),(->,(->,C,(->,(->,(!C),(->,(->,(!C),(!C)),(!C))),(->,(!C),(!C)))),(->,C,(->,(!C),(!C)))))",
            "(->,(->,C,(->,(->,(!C),(->,(->,(!C),(!C)),(!C))),(->,(!C),(!C)))),(->,C,(->,(!C),(!C))))",
            "(->,C,(->,(!C),(!C)))",
            "(->,C,(->,(!C),C))",
            "(->,(->,C,(->,(!C),C)),(->,C,(->,C,(->,(!C),C))))",
            "(->,C,(->,(!C),C))",
            "(->,C,(->,C,(->,(!C),C)))",
            "(->,(->,C,C),(->,(->,C,(->,C,(->,(!C),C))),(->,C,(->,(!C),C))))",
            "(->,(->,C,(->,C,(->,(!C),C))),(->,C,(->,(!C),C)))",
            "(->,C,(->,(!C),C))",
            "(->,(->,(!C),C),(->,(->,(!C),(!C)),(!(!C))))",
            "(->,(->,(->,(!C),C),(->,(->,(!C),(!C)),(!(!C)))),(->,C,(->,(->,(!C),C),(->,(->,(!C),(!C)),(!(!C))))))",
            "(->,(->,(!C),C),(->,(->,(!C),(!C)),(!(!C))))",
            "(->,C,(->,(->,(!C),C),(->,(->,(!C),(!C)),(!(!C)))))",
            "(->,(->,C,(->,(!C),C)),(->,(->,C,(->,(->,(!C),C),(->,(->,(!C),(!C)),(!(!C))))),(->,C,(->,(->,(!C),(!C)),(!(!C))))))",
            "(->,(->,C,(->,(->,(!C),C),(->,(->,(!C),(!C)),(!(!C))))),(->,C,(->,(->,(!C),(!C)),(!(!C)))))",
            "(->,C,(->,(->,(!C),(!C)),(!(!C))))",
            "(->,(->,C,(->,(!C),(!C))),(->,(->,C,(->,(->,(!C),(!C)),(!(!C)))),(->,C,(!(!C)))))",
            "(->,(->,C,(->,(->,(!C),(!C)),(!(!C)))),(->,C,(!(!C))))",
            "(->,C,(!(!C)))",
            "(->,C,(!(!C)))",
            "(->,(!(!(!C))),(->,(->,(!(!(!C))),(!(!(!C)))),(!(!(!C)))))",
            "(->,(->,(!(!(!C))),(->,(->,(!(!(!C))),(!(!(!C)))),(!(!(!C))))),(->,C,(->,(!(!(!C))),(->,(->,(!(!(!C))),(!(!(!C)))),(!(!(!C)))))))",
            "(->,(!(!(!C))),(->,(->,(!(!(!C))),(!(!(!C)))),(!(!(!C)))))",
            "(->,C,(->,(!(!(!C))),(->,(->,(!(!(!C))),(!(!(!C)))),(!(!(!C))))))",
            "(->,(!(!(!C))),(->,(!(!(!C))),(!(!(!C)))))",
            "(->,(->,(!(!(!C))),(->,(!(!(!C))),(!(!(!C))))),(->,C,(->,(!(!(!C))),(->,(!(!(!C))),(!(!(!C)))))))",
            "(->,(!(!(!C))),(->,(!(!(!C))),(!(!(!C)))))",
            "(->,C,(->,(!(!(!C))),(->,(!(!(!C))),(!(!(!C))))))",
            "(->,(->,(!(!(!C))),(->,(!(!(!C))),(!(!(!C))))),(->,(->,(!(!(!C))),(->,(->,(!(!(!C))),(!(!(!C)))),(!(!(!C))))),(->,(!(!(!C))),(!(!(!C))))))",
            "(->,(->,(->,(!(!(!C))),(->,(!(!(!C))),(!(!(!C))))),(->,(->,(!(!(!C))),(->,(->,(!(!(!C))),(!(!(!C)))),(!(!(!C))))),(->,(!(!(!C))),(!(!(!C)))))),(->,C,(->,(->,(!(!(!C))),(->,(!(!(!C))),(!(!(!C))))),(->,(->,(!(!(!C))),(->,(->,(!(!(!C))),(!(!(!C)))),(!(!(!C))))),(->,(!(!(!C))),(!(!(!C))))))))",
            "(->,(->,(!(!(!C))),(->,(!(!(!C))),(!(!(!C))))),(->,(->,(!(!(!C))),(->,(->,(!(!(!C))),(!(!(!C)))),(!(!(!C))))),(->,(!(!(!C))),(!(!(!C))))))",
            "(->,C,(->,(->,(!(!(!C))),(->,(!(!(!C))),(!(!(!C))))),(->,(->,(!(!(!C))),(->,(->,(!(!(!C))),(!(!(!C)))),(!(!(!C))))),(->,(!(!(!C))),(!(!(!C)))))))",
            "(->,(->,C,(->,(!(!(!C))),(->,(!(!(!C))),(!(!(!C)))))),(->,(->,C,(->,(->,(!(!(!C))),(->,(!(!(!C))),(!(!(!C))))),(->,(->,(!(!(!C))),(->,(->,(!(!(!C))),(!(!(!C)))),(!(!(!C))))),(->,(!(!(!C))),(!(!(!C))))))),(->,C,(->,(->,(!(!(!C))),(->,(->,(!(!(!C))),(!(!(!C)))),(!(!(!C))))),(->,(!(!(!C))),(!(!(!C))))))))",
            "(->,(->,C,(->,(->,(!(!(!C))),(->,(!(!(!C))),(!(!(!C))))),(->,(->,(!(!(!C))),(->,(->,(!(!(!C))),(!(!(!C)))),(!(!(!C))))),(->,(!(!(!C))),(!(!(!C))))))),(->,C,(->,(->,(!(!(!C))),(->,(->,(!(!(!C))),(!(!(!C)))),(!(!(!C))))),(->,(!(!(!C))),(!(!(!C)))))))",
            "(->,C,(->,(->,(!(!(!C))),(->,(->,(!(!(!C))),(!(!(!C)))),(!(!(!C))))),(->,(!(!(!C))),(!(!(!C))))))",
            "(->,(->,C,(->,(!(!(!C))),(->,(->,(!(!(!C))),(!(!(!C)))),(!(!(!C)))))),(->,(->,C,(->,(->,(!(!(!C))),(->,(->,(!(!(!C))),(!(!(!C)))),(!(!(!C))))),(->,(!(!(!C))),(!(!(!C)))))),(->,C,(->,(!(!(!C))),(!(!(!C)))))))",
            "(->,(->,C,(->,(->,(!(!(!C))),(->,(->,(!(!(!C))),(!(!(!C)))),(!(!(!C))))),(->,(!(!(!C))),(!(!(!C)))))),(->,C,(->,(!(!(!C))),(!(!(!C))))))",
            "(->,C,(->,(!(!(!C))),(!(!(!C)))))",
            "(->,(!(!C)),(->,(!(!(!C))),(!(!C))))",
            "(->,(->,(!(!C)),(->,(!(!(!C))),(!(!C)))),(->,C,(->,(!(!C)),(->,(!(!(!C))),(!(!C))))))",
            "(->,(!(!C)),(->,(!(!(!C))),(!(!C))))",
            "(->,C,(->,(!(!C)),(->,(!(!(!C))),(!(!C)))))",
            "(->,(->,C,(!(!C))),(->,(->,C,(->,(!(!C)),(->,(!(!(!C))),(!(!C))))),(->,C,(->,(!(!(!C))),(!(!C))))))",
            "(->,(->,C,(->,(!(!C)),(->,(!(!(!C))),(!(!C))))),(->,C,(->,(!(!(!C))),(!(!C)))))",
            "(->,C,(->,(!(!(!C))),(!(!C))))",
            "(->,(->,(!(!(!C))),(!(!C))),(->,(->,(!(!(!C))),(!(!(!C)))),(!(!(!(!C))))))",
            "(->,(->,(->,(!(!(!C))),(!(!C))),(->,(->,(!(!(!C))),(!(!(!C)))),(!(!(!(!C)))))),(->,C,(->,(->,(!(!(!C))),(!(!C))),(->,(->,(!(!(!C))),(!(!(!C)))),(!(!(!(!C))))))))",
            "(->,(->,(!(!(!C))),(!(!C))),(->,(->,(!(!(!C))),(!(!(!C)))),(!(!(!(!C))))))",
            "(->,C,(->,(->,(!(!(!C))),(!(!C))),(->,(->,(!(!(!C))),(!(!(!C)))),(!(!(!(!C)))))))",
            "(->,(->,C,(->,(!(!(!C))),(!(!C)))),(->,(->,C,(->,(->,(!(!(!C))),(!(!C))),(->,(->,(!(!(!C))),(!(!(!C)))),(!(!(!(!C))))))),(->,C,(->,(->,(!(!(!C))),(!(!(!C)))),(!(!(!(!C))))))))",
            "(->,(->,C,(->,(->,(!(!(!C))),(!(!C))),(->,(->,(!(!(!C))),(!(!(!C)))),(!(!(!(!C))))))),(->,C,(->,(->,(!(!(!C))),(!(!(!C)))),(!(!(!(!C)))))))",
            "(->,C,(->,(->,(!(!(!C))),(!(!(!C)))),(!(!(!(!C))))))",
            "(->,(->,C,(->,(!(!(!C))),(!(!(!C))))),(->,(->,C,(->,(->,(!(!(!C))),(!(!(!C)))),(!(!(!(!C)))))),(->,C,(!(!(!(!C)))))))",
            "(->,(->,C,(->,(->,(!(!(!C))),(!(!(!C)))),(!(!(!(!C)))))),(->,C,(!(!(!(!C))))))",
            "(->,C,(!(!(!(!C)))))",
            "(->,C,(!(!(!(!C)))))",
            "(->,(!(!(!(!(!C))))),(->,(->,(!(!(!(!(!C))))),(!(!(!(!(!C)))))),(!(!(!(!(!C)))))))",
            "(->,(->,(!(!(!(!(!C))))),(->,(->,(!(!(!(!(!C))))),(!(!(!(!(!C)))))),(!(!(!(!(!C))))))),(->,C,(->,(!(!(!(!(!C))))),(->,(->,(!(!(!(!(!C))))),(!(!(!(!(!C)))))),(!(!(!(!(!C)))))))))",
            "(->,(!(!(!(!(!C))))),(->,(->,(!(!(!(!(!C))))),(!(!(!(!(!C)))))),(!(!(!(!(!C)))))))",
            "(->,C,(->,(!(!(!(!(!C))))),(->,(->,(!(!(!(!(!C))))),(!(!(!(!(!C)))))),(!(!(!(!(!C))))))))",
            "(->,(!(!(!(!(!C))))),(->,(!(!(!(!(!C))))),(!(!(!(!(!C)))))))",
            "(->,(->,(!(!(!(!(!C))))),(->,(!(!(!(!(!C))))),(!(!(!(!(!C))))))),(->,C,(->,(!(!(!(!(!C))))),(->,(!(!(!(!(!C))))),(!(!(!(!(!C)))))))))",
            "(->,(!(!(!(!(!C))))),(->,(!(!(!(!(!C))))),(!(!(!(!(!C)))))))",
            "(->,C,(->,(!(!(!(!(!C))))),(->,(!(!(!(!(!C))))),(!(!(!(!(!C))))))))",
            "(->,(->,(!(!(!(!(!C))))),(->,(!(!(!(!(!C))))),(!(!(!(!(!C))))))),(->,(->,(!(!(!(!(!C))))),(->,(->,(!(!(!(!(!C))))),(!(!(!(!(!C)))))),(!(!(!(!(!C))))))),(->,(!(!(!(!(!C))))),(!(!(!(!(!C))))))))",
            "(->,(->,(->,(!(!(!(!(!C))))),(->,(!(!(!(!(!C))))),(!(!(!(!(!C))))))),(->,(->,(!(!(!(!(!C))))),(->,(->,(!(!(!(!(!C))))),(!(!(!(!(!C)))))),(!(!(!(!(!C))))))),(->,(!(!(!(!(!C))))),(!(!(!(!(!C)))))))),(->,C,(->,(->,(!(!(!(!(!C))))),(->,(!(!(!(!(!C))))),(!(!(!(!(!C))))))),(->,(->,(!(!(!(!(!C))))),(->,(->,(!(!(!(!(!C))))),(!(!(!(!(!C)))))),(!(!(!(!(!C))))))),(->,(!(!(!(!(!C))))),(!(!(!(!(!C))))))))))",
            "(->,(->,(!(!(!(!(!C))))),(->,(!(!(!(!(!C))))),(!(!(!(!(!C))))))),(->,(->,(!(!(!(!(!C))))),(->,(->,(!(!(!(!(!C))))),(!(!(!(!(!C)))))),(!(!(!(!(!C))))))),(->,(!(!(!(!(!C))))),(!(!(!(!(!C))))))))",
            "(->,C,(->,(->,(!(!(!(!(!C))))),(->,(!(!(!(!(!C))))),(!(!(!(!(!C))))))),(->,(->,(!(!(!(!(!C))))),(->,(->,(!(!(!(!(!C))))),(!(!(!(!(!C)))))),(!(!(!(!(!C))))))),(->,(!(!(!(!(!C))))),(!(!(!(!(!C)))))))))",
            "(->,(->,C,(->,(!(!(!(!(!C))))),(->,(!(!(!(!(!C))))),(!(!(!(!(!C)))))))),(->,(->,C,(->,(->,(!(!(!(!(!C))))),(->,(!(!(!(!(!C))))),(!(!(!(!(!C))))))),(->,(->,(!(!(!(!(!C))))),(->,(->,(!(!(!(!(!C))))),(!(!(!(!(!C)))))),(!(!(!(!(!C))))))),(->,(!(!(!(!(!C))))),(!(!(!(!(!C))))))))),(->,C,(->,(->,(!(!(!(!(!C))))),(->,(->,(!(!(!(!(!C))))),(!(!(!(!(!C)))))),(!(!(!(!(!C))))))),(->,(!(!(!(!(!C))))),(!(!(!(!(!C))))))))))",
            "(->,(->,C,(->,(->,(!(!(!(!(!C))))),(->,(!(!(!(!(!C))))),(!(!(!(!(!C))))))),(->,(->,(!(!(!(!(!C))))),(->,(->,(!(!(!(!(!C))))),(!(!(!(!(!C)))))),(!(!(!(!(!C))))))),(->,(!(!(!(!(!C))))),(!(!(!(!(!C))))))))),(->,C,(->,(->,(!(!(!(!(!C))))),(->,(->,(!(!(!(!(!C))))),(!(!(!(!(!C)))))),(!(!(!(!(!C))))))),(->,(!(!(!(!(!C))))),(!(!(!(!(!C)))))))))",
            "(->,C,(->,(->,(!(!(!(!(!C))))),(->,(->,(!(!(!(!(!C))))),(!(!(!(!(!C)))))),(!(!(!(!(!C))))))),(->,(!(!(!(!(!C))))),(!(!(!(!(!C))))))))",
            "(->,(->,C,(->,(!(!(!(!(!C))))),(->,(->,(!(!(!(!(!C))))),(!(!(!(!(!C)))))),(!(!(!(!(!C)))))))),(->,(->,C,(->,(->,(!(!(!(!(!C))))),(->,(->,(!(!(!(!(!C))))),(!(!(!(!(!C)))))),(!(!(!(!(!C))))))),(->,(!(!(!(!(!C))))),(!(!(!(!(!C)))))))),(->,C,(->,(!(!(!(!(!C))))),(!(!(!(!(!C)))))))))",
            "(->,(->,C,(->,(->,(!(!(!(!(!C))))),(->,(->,(!(!(!(!(!C))))),(!(!(!(!(!C)))))),(!(!(!(!(!C))))))),(->,(!(!(!(!(!C))))),(!(!(!(!(!C)))))))),(->,C,(->,(!(!(!(!(!C))))),(!(!(!(!(!C))))))))",
            "(->,C,(->,(!(!(!(!(!C))))),(!(!(!(!(!C)))))))",
            "(->,(!(!(!(!C)))),(->,(!(!(!(!(!C))))),(!(!(!(!C))))))",
            "(->,(->,(!(!(!(!C)))),(->,(!(!(!(!(!C))))),(!(!(!(!C)))))),(->,C,(->,(!(!(!(!C)))),(->,(!(!(!(!(!C))))),(!(!(!(!C))))))))",
            "(->,(!(!(!(!C)))),(->,(!(!(!(!(!C))))),(!(!(!(!C))))))",
            "(->,C,(->,(!(!(!(!C)))),(->,(!(!(!(!(!C))))),(!(!(!(!C)))))))",
            "(->,(->,C,(!(!(!(!C))))),(->,(->,C,(->,(!(!(!(!C)))),(->,(!(!(!(!(!C))))),(!(!(!(!C))))))),(->,C,(->,(!(!(!(!(!C))))),(!(!(!(!C))))))))",
            "(->,(->,C,(->,(!(!(!(!C)))),(->,(!(!(!(!(!C))))),(!(!(!(!C))))))),(->,C,(->,(!(!(!(!(!C))))),(!(!(!(!C)))))))",
            "(->,C,(->,(!(!(!(!(!C))))),(!(!(!(!C))))))",
            "(->,(->,(!(!(!(!(!C))))),(!(!(!(!C))))),(->,(->,(!(!(!(!(!C))))),(!(!(!(!(!C)))))),(!(!(!(!(!(!C))))))))",
            "(->,(->,(->,(!(!(!(!(!C))))),(!(!(!(!C))))),(->,(->,(!(!(!(!(!C))))),(!(!(!(!(!C)))))),(!(!(!(!(!(!C)))))))),(->,C,(->,(->,(!(!(!(!(!C))))),(!(!(!(!C))))),(->,(->,(!(!(!(!(!C))))),(!(!(!(!(!C)))))),(!(!(!(!(!(!C))))))))))",
            "(->,(->,(!(!(!(!(!C))))),(!(!(!(!C))))),(->,(->,(!(!(!(!(!C))))),(!(!(!(!(!C)))))),(!(!(!(!(!(!C))))))))",
            "(->,C,(->,(->,(!(!(!(!(!C))))),(!(!(!(!C))))),(->,(->,(!(!(!(!(!C))))),(!(!(!(!(!C)))))),(!(!(!(!(!(!C)))))))))",
            "(->,(->,C,(->,(!(!(!(!(!C))))),(!(!(!(!C)))))),(->,(->,C,(->,(->,(!(!(!(!(!C))))),(!(!(!(!C))))),(->,(->,(!(!(!(!(!C))))),(!(!(!(!(!C)))))),(!(!(!(!(!(!C))))))))),(->,C,(->,(->,(!(!(!(!(!C))))),(!(!(!(!(!C)))))),(!(!(!(!(!(!C))))))))))",
            "(->,(->,C,(->,(->,(!(!(!(!(!C))))),(!(!(!(!C))))),(->,(->,(!(!(!(!(!C))))),(!(!(!(!(!C)))))),(!(!(!(!(!(!C))))))))),(->,C,(->,(->,(!(!(!(!(!C))))),(!(!(!(!(!C)))))),(!(!(!(!(!(!C)))))))))",
            "(->,C,(->,(->,(!(!(!(!(!C))))),(!(!(!(!(!C)))))),(!(!(!(!(!(!C))))))))",
            "(->,(->,C,(->,(!(!(!(!(!C))))),(!(!(!(!(!C))))))),(->,(->,C,(->,(->,(!(!(!(!(!C))))),(!(!(!(!(!C)))))),(!(!(!(!(!(!C)))))))),(->,C,(!(!(!(!(!(!C)))))))))",
            "(->,(->,C,(->,(->,(!(!(!(!(!C))))),(!(!(!(!(!C)))))),(!(!(!(!(!(!C)))))))),(->,C,(!(!(!(!(!(!C))))))))",
            "(->,C,(!(!(!(!(!(!C)))))))",
            "(->,C,(!(!(!(!(!(!C)))))))",
            "(->,(!(!(!(!(!(!(!C))))))),(->,(->,(!(!(!(!(!(!(!C))))))),(!(!(!(!(!(!(!C)))))))),(!(!(!(!(!(!(!C)))))))))",
            "(->,(->,(!(!(!(!(!(!(!C))))))),(->,(->,(!(!(!(!(!(!(!C))))))),(!(!(!(!(!(!(!C)))))))),(!(!(!(!(!(!(!C))))))))),(->,C,(->,(!(!(!(!(!(!(!C))))))),(->,(->,(!(!(!(!(!(!(!C))))))),(!(!(!(!(!(!(!C)))))))),(!(!(!(!(!(!(!C)))))))))))",
            "(->,(!(!(!(!(!(!(!C))))))),(->,(->,(!(!(!(!(!(!(!C))))))),(!(!(!(!(!(!(!C)))))))),(!(!(!(!(!(!(!C)))))))))",
            "(->,C,(->,(!(!(!(!(!(!(!C))))))),(->,(->,(!(!(!(!(!(!(!C))))))),(!(!(!(!(!(!(!C)))))))),(!(!(!(!(!(!(!C))))))))))",
            "(->,(!(!(!(!(!(!(!C))))))),(->,(!(!(!(!(!(!(!C))))))),(!(!(!(!(!(!(!C)))))))))",
            "(->,(->,(!(!(!(!(!(!(!C))))))),(->,(!(!(!(!(!(!(!C))))))),(!(!(!(!(!(!(!C))))))))),(->,C,(->,(!(!(!(!(!(!(!C))))))),(->,(!(!(!(!(!(!(!C))))))),(!(!(!(!(!(!(!C)))))))))))",
            "(->,(!(!(!(!(!(!(!C))))))),(->,(!(!(!(!(!(!(!C))))))),(!(!(!(!(!(!(!C)))))))))",
            "(->,C,(->,(!(!(!(!(!(!(!C))))))),(->,(!(!(!(!(!(!(!C))))))),(!(!(!(!(!(!(!C))))))))))",
            "(->,(->,(!(!(!(!(!(!(!C))))))),(->,(!(!(!(!(!(!(!C))))))),(!(!(!(!(!(!(!C))))))))),(->,(->,(!(!(!(!(!(!(!C))))))),(->,(->,(!(!(!(!(!(!(!C))))))),(!(!(!(!(!(!(!C)))))))),(!(!(!(!(!(!(!C))))))))),(->,(!(!(!(!(!(!(!C))))))),(!(!(!(!(!(!(!C))))))))))",

            "(->,(->,(!(!(!(!(!(!(!C))))))),(->,(!(!(!(!(!(!(!C))))))),(!(!(!(!(!(!(!C))))))))),(->,(->,(!(!(!(!(!(!(!C))))))),(->,(->,(!(!(!(!(!(!(!C))))))),(!(!(!(!(!(!(!C)))))))),(!(!(!(!(!(!(!C))))))))),(->,(!(!(!(!(!(!(!C))))))),(!(!(!(!(!(!(!C))))))))))",
            "(->,C,(->,(->,(!(!(!(!(!(!(!C))))))),(->,(!(!(!(!(!(!(!C))))))),(!(!(!(!(!(!(!C))))))))),(->,(->,(!(!(!(!(!(!(!C))))))),(->,(->,(!(!(!(!(!(!(!C))))))),(!(!(!(!(!(!(!C)))))))),(!(!(!(!(!(!(!C))))))))),(->,(!(!(!(!(!(!(!C))))))),(!(!(!(!(!(!(!C)))))))))))",

            "(->,(->,C,(->,(->,(!(!(!(!(!(!(!C))))))),(->,(!(!(!(!(!(!(!C))))))),(!(!(!(!(!(!(!C))))))))),(->,(->,(!(!(!(!(!(!(!C))))))),(->,(->,(!(!(!(!(!(!(!C))))))),(!(!(!(!(!(!(!C)))))))),(!(!(!(!(!(!(!C))))))))),(->,(!(!(!(!(!(!(!C))))))),(!(!(!(!(!(!(!C))))))))))),(->,C,(->,(->,(!(!(!(!(!(!(!C))))))),(->,(->,(!(!(!(!(!(!(!C))))))),(!(!(!(!(!(!(!C)))))))),(!(!(!(!(!(!(!C))))))))),(->,(!(!(!(!(!(!(!C))))))),(!(!(!(!(!(!(!C)))))))))))",
            "(->,C,(->,(->,(!(!(!(!(!(!(!C))))))),(->,(->,(!(!(!(!(!(!(!C))))))),(!(!(!(!(!(!(!C)))))))),(!(!(!(!(!(!(!C))))))))),(->,(!(!(!(!(!(!(!C))))))),(!(!(!(!(!(!(!C))))))))))",
            "(->,(->,C,(->,(!(!(!(!(!(!(!C))))))),(->,(->,(!(!(!(!(!(!(!C))))))),(!(!(!(!(!(!(!C)))))))),(!(!(!(!(!(!(!C)))))))))),(->,(->,C,(->,(->,(!(!(!(!(!(!(!C))))))),(->,(->,(!(!(!(!(!(!(!C))))))),(!(!(!(!(!(!(!C)))))))),(!(!(!(!(!(!(!C))))))))),(->,(!(!(!(!(!(!(!C))))))),(!(!(!(!(!(!(!C)))))))))),(->,C,(->,(!(!(!(!(!(!(!C))))))),(!(!(!(!(!(!(!C)))))))))))",
            "(->,(->,C,(->,(->,(!(!(!(!(!(!(!C))))))),(->,(->,(!(!(!(!(!(!(!C))))))),(!(!(!(!(!(!(!C)))))))),(!(!(!(!(!(!(!C))))))))),(->,(!(!(!(!(!(!(!C))))))),(!(!(!(!(!(!(!C)))))))))),(->,C,(->,(!(!(!(!(!(!(!C))))))),(!(!(!(!(!(!(!C))))))))))",
            "(->,C,(->,(!(!(!(!(!(!(!C))))))),(!(!(!(!(!(!(!C)))))))))",
            "(->,(!(!(!(!(!(!C)))))),(->,(!(!(!(!(!(!(!C))))))),(!(!(!(!(!(!C))))))))",
            "(->,(->,(!(!(!(!(!(!C)))))),(->,(!(!(!(!(!(!(!C))))))),(!(!(!(!(!(!C)))))))),(->,C,(->,(!(!(!(!(!(!C)))))),(->,(!(!(!(!(!(!(!C))))))),(!(!(!(!(!(!C))))))))))",
            "(->,(!(!(!(!(!(!C)))))),(->,(!(!(!(!(!(!(!C))))))),(!(!(!(!(!(!C))))))))",
            "(->,C,(->,(!(!(!(!(!(!C)))))),(->,(!(!(!(!(!(!(!C))))))),(!(!(!(!(!(!C)))))))))",
            "(->,(->,C,(!(!(!(!(!(!C))))))),(->,(->,C,(->,(!(!(!(!(!(!C)))))),(->,(!(!(!(!(!(!(!C))))))),(!(!(!(!(!(!C))))))))),(->,C,(->,(!(!(!(!(!(!(!C))))))),(!(!(!(!(!(!C))))))))))",
            "(->,(->,C,(->,(!(!(!(!(!(!C)))))),(->,(!(!(!(!(!(!(!C))))))),(!(!(!(!(!(!C))))))))),(->,C,(->,(!(!(!(!(!(!(!C))))))),(!(!(!(!(!(!C)))))))))",
            "(->,C,(->,(!(!(!(!(!(!(!C))))))),(!(!(!(!(!(!C))))))))",
            "(->,(->,(!(!(!(!(!(!(!C))))))),(!(!(!(!(!(!C))))))),(->,(->,(!(!(!(!(!(!(!C))))))),(!(!(!(!(!(!(!C)))))))),(!(!(!(!(!(!(!(!C))))))))))",
            "(->,(->,(->,(!(!(!(!(!(!(!C))))))),(!(!(!(!(!(!C))))))),(->,(->,(!(!(!(!(!(!(!C))))))),(!(!(!(!(!(!(!C)))))))),(!(!(!(!(!(!(!(!C)))))))))),(->,C,(->,(->,(!(!(!(!(!(!(!C))))))),(!(!(!(!(!(!C))))))),(->,(->,(!(!(!(!(!(!(!C))))))),(!(!(!(!(!(!(!C)))))))),(!(!(!(!(!(!(!(!C))))))))))))",
            "(->,(->,(!(!(!(!(!(!(!C))))))),(!(!(!(!(!(!C))))))),(->,(->,(!(!(!(!(!(!(!C))))))),(!(!(!(!(!(!(!C)))))))),(!(!(!(!(!(!(!(!C))))))))))",
            "(->,C,(->,(->,(!(!(!(!(!(!(!C))))))),(!(!(!(!(!(!C))))))),(->,(->,(!(!(!(!(!(!(!C))))))),(!(!(!(!(!(!(!C)))))))),(!(!(!(!(!(!(!(!C)))))))))))",
            "(->,(->,C,(->,(!(!(!(!(!(!(!C))))))),(!(!(!(!(!(!C)))))))),(->,(->,C,(->,(->,(!(!(!(!(!(!(!C))))))),(!(!(!(!(!(!C))))))),(->,(->,(!(!(!(!(!(!(!C))))))),(!(!(!(!(!(!(!C)))))))),(!(!(!(!(!(!(!(!C))))))))))),(->,C,(->,(->,(!(!(!(!(!(!(!C))))))),(!(!(!(!(!(!(!C)))))))),(!(!(!(!(!(!(!(!C))))))))))))",
            "(->,(->,C,(->,(->,(!(!(!(!(!(!(!C))))))),(!(!(!(!(!(!C))))))),(->,(->,(!(!(!(!(!(!(!C))))))),(!(!(!(!(!(!(!C)))))))),(!(!(!(!(!(!(!(!C))))))))))),(->,C,(->,(->,(!(!(!(!(!(!(!C))))))),(!(!(!(!(!(!(!C)))))))),(!(!(!(!(!(!(!(!C)))))))))))",
            "(->,C,(->,(->,(!(!(!(!(!(!(!C))))))),(!(!(!(!(!(!(!C)))))))),(!(!(!(!(!(!(!(!C))))))))))",
            "(->,(->,C,(->,(!(!(!(!(!(!(!C))))))),(!(!(!(!(!(!(!C))))))))),(->,(->,C,(->,(->,(!(!(!(!(!(!(!C))))))),(!(!(!(!(!(!(!C)))))))),(!(!(!(!(!(!(!(!C)))))))))),(->,C,(!(!(!(!(!(!(!(!C)))))))))))",
            "(->,(->,C,(->,(->,(!(!(!(!(!(!(!C))))))),(!(!(!(!(!(!(!C)))))))),(!(!(!(!(!(!(!(!C)))))))))),(->,C,(!(!(!(!(!(!(!(!C))))))))))",
            "(->,C,(!(!(!(!(!(!(!(!C)))))))))",
            "(->,C,(!(!(!(!(!(!(!(!C)))))))))",
            "(->,(!(!(!(!(!(!(!(!(!C))))))))),(->,(->,(!(!(!(!(!(!(!(!(!C))))))))),(!(!(!(!(!(!(!(!(!C)))))))))),(!(!(!(!(!(!(!(!(!C)))))))))))",
            "(->,(->,(!(!(!(!(!(!(!(!(!C))))))))),(->,(->,(!(!(!(!(!(!(!(!(!C))))))))),(!(!(!(!(!(!(!(!(!C)))))))))),(!(!(!(!(!(!(!(!(!C))))))))))),(->,C,(->,(!(!(!(!(!(!(!(!(!C))))))))),(->,(->,(!(!(!(!(!(!(!(!(!C))))))))),(!(!(!(!(!(!(!(!(!C)))))))))),(!(!(!(!(!(!(!(!(!C)))))))))))))",
            "(->,(!(!(!(!(!(!(!(!(!C))))))))),(->,(->,(!(!(!(!(!(!(!(!(!C))))))))),(!(!(!(!(!(!(!(!(!C)))))))))),(!(!(!(!(!(!(!(!(!C)))))))))))",
            "(->,C,(->,(!(!(!(!(!(!(!(!(!C))))))))),(->,(->,(!(!(!(!(!(!(!(!(!C))))))))),(!(!(!(!(!(!(!(!(!C)))))))))),(!(!(!(!(!(!(!(!(!C))))))))))))",
            "(->,(!(!(!(!(!(!(!(!(!C))))))))),(->,(!(!(!(!(!(!(!(!(!C))))))))),(!(!(!(!(!(!(!(!(!C)))))))))))",
            "(->,(->,(!(!(!(!(!(!(!(!(!C))))))))),(->,(!(!(!(!(!(!(!(!(!C))))))))),(!(!(!(!(!(!(!(!(!C))))))))))),(->,C,(->,(!(!(!(!(!(!(!(!(!C))))))))),(->,(!(!(!(!(!(!(!(!(!C))))))))),(!(!(!(!(!(!(!(!(!C)))))))))))))",
            "(->,(!(!(!(!(!(!(!(!(!C))))))))),(->,(!(!(!(!(!(!(!(!(!C))))))))),(!(!(!(!(!(!(!(!(!C)))))))))))",
            "(->,C,(->,(!(!(!(!(!(!(!(!(!C))))))))),(->,(!(!(!(!(!(!(!(!(!C))))))))),(!(!(!(!(!(!(!(!(!C))))))))))))",
            "(->,(->,(!(!(!(!(!(!(!(!(!C))))))))),(->,(!(!(!(!(!(!(!(!(!C))))))))),(!(!(!(!(!(!(!(!(!C))))))))))),(->,(->,(!(!(!(!(!(!(!(!(!C))))))))),(->,(->,(!(!(!(!(!(!(!(!(!C))))))))),(!(!(!(!(!(!(!(!(!C)))))))))),(!(!(!(!(!(!(!(!(!C))))))))))),(->,(!(!(!(!(!(!(!(!(!C))))))))),(!(!(!(!(!(!(!(!(!C))))))))))))",

            "(->,(->,(!(!(!(!(!(!(!(!(!C))))))))),(->,(!(!(!(!(!(!(!(!(!C))))))))),(!(!(!(!(!(!(!(!(!C))))))))))),(->,(->,(!(!(!(!(!(!(!(!(!C))))))))),(->,(->,(!(!(!(!(!(!(!(!(!C))))))))),(!(!(!(!(!(!(!(!(!C)))))))))),(!(!(!(!(!(!(!(!(!C))))))))))),(->,(!(!(!(!(!(!(!(!(!C))))))))),(!(!(!(!(!(!(!(!(!C))))))))))))",
            "(->,C,(->,(->,(!(!(!(!(!(!(!(!(!C))))))))),(->,(!(!(!(!(!(!(!(!(!C))))))))),(!(!(!(!(!(!(!(!(!C))))))))))),(->,(->,(!(!(!(!(!(!(!(!(!C))))))))),(->,(->,(!(!(!(!(!(!(!(!(!C))))))))),(!(!(!(!(!(!(!(!(!C)))))))))),(!(!(!(!(!(!(!(!(!C))))))))))),(->,(!(!(!(!(!(!(!(!(!C))))))))),(!(!(!(!(!(!(!(!(!C)))))))))))))",


            "(->,C,(->,(->,(!(!(!(!(!(!(!(!(!C))))))))),(->,(->,(!(!(!(!(!(!(!(!(!C))))))))),(!(!(!(!(!(!(!(!(!C)))))))))),(!(!(!(!(!(!(!(!(!C))))))))))),(->,(!(!(!(!(!(!(!(!(!C))))))))),(!(!(!(!(!(!(!(!(!C))))))))))))",
            "(->,(->,C,(->,(!(!(!(!(!(!(!(!(!C))))))))),(->,(->,(!(!(!(!(!(!(!(!(!C))))))))),(!(!(!(!(!(!(!(!(!C)))))))))),(!(!(!(!(!(!(!(!(!C)))))))))))),(->,(->,C,(->,(->,(!(!(!(!(!(!(!(!(!C))))))))),(->,(->,(!(!(!(!(!(!(!(!(!C))))))))),(!(!(!(!(!(!(!(!(!C)))))))))),(!(!(!(!(!(!(!(!(!C))))))))))),(->,(!(!(!(!(!(!(!(!(!C))))))))),(!(!(!(!(!(!(!(!(!C)))))))))))),(->,C,(->,(!(!(!(!(!(!(!(!(!C))))))))),(!(!(!(!(!(!(!(!(!C)))))))))))))",
            "(->,(->,C,(->,(->,(!(!(!(!(!(!(!(!(!C))))))))),(->,(->,(!(!(!(!(!(!(!(!(!C))))))))),(!(!(!(!(!(!(!(!(!C)))))))))),(!(!(!(!(!(!(!(!(!C))))))))))),(->,(!(!(!(!(!(!(!(!(!C))))))))),(!(!(!(!(!(!(!(!(!C)))))))))))),(->,C,(->,(!(!(!(!(!(!(!(!(!C))))))))),(!(!(!(!(!(!(!(!(!C))))))))))))",
            "(->,C,(->,(!(!(!(!(!(!(!(!(!C))))))))),(!(!(!(!(!(!(!(!(!C)))))))))))",
            "(->,(!(!(!(!(!(!(!(!C)))))))),(->,(!(!(!(!(!(!(!(!(!C))))))))),(!(!(!(!(!(!(!(!C))))))))))",
            "(->,(->,(!(!(!(!(!(!(!(!C)))))))),(->,(!(!(!(!(!(!(!(!(!C))))))))),(!(!(!(!(!(!(!(!C)))))))))),(->,C,(->,(!(!(!(!(!(!(!(!C)))))))),(->,(!(!(!(!(!(!(!(!(!C))))))))),(!(!(!(!(!(!(!(!C))))))))))))",
            "(->,(!(!(!(!(!(!(!(!C)))))))),(->,(!(!(!(!(!(!(!(!(!C))))))))),(!(!(!(!(!(!(!(!C))))))))))",
            "(->,C,(->,(!(!(!(!(!(!(!(!C)))))))),(->,(!(!(!(!(!(!(!(!(!C))))))))),(!(!(!(!(!(!(!(!C)))))))))))",
            "(->,(->,C,(!(!(!(!(!(!(!(!C))))))))),(->,(->,C,(->,(!(!(!(!(!(!(!(!C)))))))),(->,(!(!(!(!(!(!(!(!(!C))))))))),(!(!(!(!(!(!(!(!C))))))))))),(->,C,(->,(!(!(!(!(!(!(!(!(!C))))))))),(!(!(!(!(!(!(!(!C))))))))))))",
            "(->,(->,C,(->,(!(!(!(!(!(!(!(!C)))))))),(->,(!(!(!(!(!(!(!(!(!C))))))))),(!(!(!(!(!(!(!(!C))))))))))),(->,C,(->,(!(!(!(!(!(!(!(!(!C))))))))),(!(!(!(!(!(!(!(!C)))))))))))",
            "(->,C,(->,(!(!(!(!(!(!(!(!(!C))))))))),(!(!(!(!(!(!(!(!C))))))))))",
            "(->,(->,(!(!(!(!(!(!(!(!(!C))))))))),(!(!(!(!(!(!(!(!C))))))))),(->,(->,(!(!(!(!(!(!(!(!(!C))))))))),(!(!(!(!(!(!(!(!(!C)))))))))),(!(!(!(!(!(!(!(!(!(!C))))))))))))",
            "(->,(->,(->,(!(!(!(!(!(!(!(!(!C))))))))),(!(!(!(!(!(!(!(!C))))))))),(->,(->,(!(!(!(!(!(!(!(!(!C))))))))),(!(!(!(!(!(!(!(!(!C)))))))))),(!(!(!(!(!(!(!(!(!(!C)))))))))))),(->,C,(->,(->,(!(!(!(!(!(!(!(!(!C))))))))),(!(!(!(!(!(!(!(!C))))))))),(->,(->,(!(!(!(!(!(!(!(!(!C))))))))),(!(!(!(!(!(!(!(!(!C)))))))))),(!(!(!(!(!(!(!(!(!(!C))))))))))))))",
            "(->,(->,(!(!(!(!(!(!(!(!(!C))))))))),(!(!(!(!(!(!(!(!C))))))))),(->,(->,(!(!(!(!(!(!(!(!(!C))))))))),(!(!(!(!(!(!(!(!(!C)))))))))),(!(!(!(!(!(!(!(!(!(!C))))))))))))",
            "(->,C,(->,(->,(!(!(!(!(!(!(!(!(!C))))))))),(!(!(!(!(!(!(!(!C))))))))),(->,(->,(!(!(!(!(!(!(!(!(!C))))))))),(!(!(!(!(!(!(!(!(!C)))))))))),(!(!(!(!(!(!(!(!(!(!C)))))))))))))",
            "(->,(->,C,(->,(!(!(!(!(!(!(!(!(!C))))))))),(!(!(!(!(!(!(!(!C)))))))))),(->,(->,C,(->,(->,(!(!(!(!(!(!(!(!(!C))))))))),(!(!(!(!(!(!(!(!C))))))))),(->,(->,(!(!(!(!(!(!(!(!(!C))))))))),(!(!(!(!(!(!(!(!(!C)))))))))),(!(!(!(!(!(!(!(!(!(!C))))))))))))),(->,C,(->,(->,(!(!(!(!(!(!(!(!(!C))))))))),(!(!(!(!(!(!(!(!(!C)))))))))),(!(!(!(!(!(!(!(!(!(!C))))))))))))))",
            "(->,(->,C,(->,(->,(!(!(!(!(!(!(!(!(!C))))))))),(!(!(!(!(!(!(!(!C))))))))),(->,(->,(!(!(!(!(!(!(!(!(!C))))))))),(!(!(!(!(!(!(!(!(!C)))))))))),(!(!(!(!(!(!(!(!(!(!C))))))))))))),(->,C,(->,(->,(!(!(!(!(!(!(!(!(!C))))))))),(!(!(!(!(!(!(!(!(!C)))))))))),(!(!(!(!(!(!(!(!(!(!C)))))))))))))",
            "(->,C,(->,(->,(!(!(!(!(!(!(!(!(!C))))))))),(!(!(!(!(!(!(!(!(!C)))))))))),(!(!(!(!(!(!(!(!(!(!C))))))))))))",
            "(->,(->,C,(->,(!(!(!(!(!(!(!(!(!C))))))))),(!(!(!(!(!(!(!(!(!C))))))))))),(->,(->,C,(->,(->,(!(!(!(!(!(!(!(!(!C))))))))),(!(!(!(!(!(!(!(!(!C)))))))))),(!(!(!(!(!(!(!(!(!(!C)))))))))))),(->,C,(!(!(!(!(!(!(!(!(!(!C)))))))))))))",
            "(->,(->,C,(->,(->,(!(!(!(!(!(!(!(!(!C))))))))),(!(!(!(!(!(!(!(!(!C)))))))))),(!(!(!(!(!(!(!(!(!(!C)))))))))))),(->,C,(!(!(!(!(!(!(!(!(!(!C))))))))))))",
            "(->,C,(!(!(!(!(!(!(!(!(!(!C)))))))))))",
            "(->,C,(!B))",
            "(->,B,(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),B))",
            "(->,(->,B,(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),B)),(->,C,(->,B,(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),B))))",
            "(->,B,(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),B))",
            "(->,C,(->,B,(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),B)))",
            "(->,(->,(!B),(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),(!B))),(->,B,(->,(!B),(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),(!B)))))",
            "(->,(->,(->,(!B),(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),(!B))),(->,B,(->,(!B),(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),(!B))))),(->,C,(->,(->,(!B),(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),(!B))),(->,B,(->,(!B),(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),(!B)))))))",
            "(->,(->,(!B),(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),(!B))),(->,B,(->,(!B),(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),(!B)))))",
            "(->,C,(->,(->,(!B),(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),(!B))),(->,B,(->,(!B),(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),(!B))))))",
            "(->,(!B),(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),(!B)))",
            "(->,(->,(!B),(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),(!B))),(->,C,(->,(!B),(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),(!B)))))",
            "(->,(!B),(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),(!B)))",
            "(->,C,(->,(!B),(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),(!B))))",
            "(->,(->,C,(->,(!B),(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),(!B)))),(->,(->,C,(->,(->,(!B),(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),(!B))),(->,B,(->,(!B),(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),(!B)))))),(->,C,(->,B,(->,(!B),(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),(!B)))))))",
            "(->,(->,C,(->,(->,(!B),(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),(!B))),(->,B,(->,(!B),(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),(!B)))))),(->,C,(->,B,(->,(!B),(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),(!B))))))",
            "(->,C,(->,B,(->,(!B),(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),(!B)))))",
            "(->,(!B),(->,B,(!B)))",
            "(->,(->,(!B),(->,B,(!B))),(->,C,(->,(!B),(->,B,(!B)))))",
            "(->,(!B),(->,B,(!B)))",
            "(->,C,(->,(!B),(->,B,(!B))))",
            "(->,(->,C,(!B)),(->,(->,C,(->,(!B),(->,B,(!B)))),(->,C,(->,B,(!B)))))",
            "(->,(->,C,(->,(!B),(->,B,(!B)))),(->,C,(->,B,(!B))))",
            "(->,C,(->,B,(!B)))",
            "(->,(->,B,(!B)),(->,(->,B,(->,(!B),(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),(!B)))),(->,B,(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),(!B)))))",
            "(->,(->,(->,B,(!B)),(->,(->,B,(->,(!B),(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),(!B)))),(->,B,(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),(!B))))),(->,C,(->,(->,B,(!B)),(->,(->,B,(->,(!B),(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),(!B)))),(->,B,(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),(!B)))))))",
            "(->,(->,B,(!B)),(->,(->,B,(->,(!B),(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),(!B)))),(->,B,(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),(!B)))))",
            "(->,C,(->,(->,B,(!B)),(->,(->,B,(->,(!B),(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),(!B)))),(->,B,(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),(!B))))))",
            "(->,(->,C,(->,B,(!B))),(->,(->,C,(->,(->,B,(!B)),(->,(->,B,(->,(!B),(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),(!B)))),(->,B,(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),(!B)))))),(->,C,(->,(->,B,(->,(!B),(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),(!B)))),(->,B,(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),(!B)))))))",
            "(->,(->,C,(->,(->,B,(!B)),(->,(->,B,(->,(!B),(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),(!B)))),(->,B,(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),(!B)))))),(->,C,(->,(->,B,(->,(!B),(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),(!B)))),(->,B,(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),(!B))))))",
            "(->,C,(->,(->,B,(->,(!B),(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),(!B)))),(->,B,(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),(!B)))))",
            "(->,(->,C,(->,B,(->,(!B),(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),(!B))))),(->,(->,C,(->,(->,B,(->,(!B),(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),(!B)))),(->,B,(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),(!B))))),(->,C,(->,B,(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),(!B))))))",
            "(->,(->,C,(->,(->,B,(->,(!B),(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),(!B)))),(->,B,(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),(!B))))),(->,C,(->,B,(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),(!B)))))",
            "(->,C,(->,B,(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),(!B))))",
            "(->,(->,(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),B),(->,(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),(!B)),(!(!(!(!(!(!(!(!(!(!(!C))))))))))))),(->,B,(->,(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),B),(->,(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),(!B)),(!(!(!(!(!(!(!(!(!(!(!C)))))))))))))))",
            "(->,(->,(->,(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),B),(->,(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),(!B)),(!(!(!(!(!(!(!(!(!(!(!C))))))))))))),(->,B,(->,(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),B),(->,(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),(!B)),(!(!(!(!(!(!(!(!(!(!(!C))))))))))))))),(->,C,(->,(->,(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),B),(->,(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),(!B)),(!(!(!(!(!(!(!(!(!(!(!C))))))))))))),(->,B,(->,(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),B),(->,(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),(!B)),(!(!(!(!(!(!(!(!(!(!(!C)))))))))))))))))",
            "(->,(->,(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),B),(->,(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),(!B)),(!(!(!(!(!(!(!(!(!(!(!C))))))))))))),(->,B,(->,(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),B),(->,(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),(!B)),(!(!(!(!(!(!(!(!(!(!(!C)))))))))))))))",
            "(->,C,(->,(->,(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),B),(->,(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),(!B)),(!(!(!(!(!(!(!(!(!(!(!C))))))))))))),(->,B,(->,(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),B),(->,(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),(!B)),(!(!(!(!(!(!(!(!(!(!(!C))))))))))))))))",
            "(->,(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),B),(->,(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),(!B)),(!(!(!(!(!(!(!(!(!(!(!C)))))))))))))",
            "(->,(->,(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),B),(->,(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),(!B)),(!(!(!(!(!(!(!(!(!(!(!C))))))))))))),(->,C,(->,(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),B),(->,(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),(!B)),(!(!(!(!(!(!(!(!(!(!(!C)))))))))))))))",
            "(->,(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),B),(->,(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),(!B)),(!(!(!(!(!(!(!(!(!(!(!C)))))))))))))",
            "(->,C,(->,(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),B),(->,(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),(!B)),(!(!(!(!(!(!(!(!(!(!(!C))))))))))))))",

            "(->,(->,C,(->,(->,(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),B),(->,(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),(!B)),(!(!(!(!(!(!(!(!(!(!(!C))))))))))))),(->,B,(->,(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),B),(->,(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),(!B)),(!(!(!(!(!(!(!(!(!(!(!C)))))))))))))))),(->,C,(->,B,(->,(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),B),(->,(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),(!B)),(!(!(!(!(!(!(!(!(!(!(!C))))))))))))))))",
            "(->,C,(->,B,(->,(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),B),(->,(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),(!B)),(!(!(!(!(!(!(!(!(!(!(!C)))))))))))))))",
            "(->,(->,B,(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),B)),(->,(->,B,(->,(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),B),(->,(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),(!B)),(!(!(!(!(!(!(!(!(!(!(!C)))))))))))))),(->,B,(->,(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),(!B)),(!(!(!(!(!(!(!(!(!(!(!C)))))))))))))))",

            "(->,(->,B,(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),B)),(->,(->,B,(->,(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),B),(->,(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),(!B)),(!(!(!(!(!(!(!(!(!(!(!C)))))))))))))),(->,B,(->,(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),(!B)),(!(!(!(!(!(!(!(!(!(!(!C)))))))))))))))",
            "(->,C,(->,(->,B,(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),B)),(->,(->,B,(->,(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),B),(->,(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),(!B)),(!(!(!(!(!(!(!(!(!(!(!C)))))))))))))),(->,B,(->,(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),(!B)),(!(!(!(!(!(!(!(!(!(!(!C))))))))))))))))",

            "(->,(->,C,(->,(->,B,(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),B)),(->,(->,B,(->,(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),B),(->,(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),(!B)),(!(!(!(!(!(!(!(!(!(!(!C)))))))))))))),(->,B,(->,(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),(!B)),(!(!(!(!(!(!(!(!(!(!(!C)))))))))))))))),(->,C,(->,(->,B,(->,(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),B),(->,(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),(!B)),(!(!(!(!(!(!(!(!(!(!(!C)))))))))))))),(->,B,(->,(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),(!B)),(!(!(!(!(!(!(!(!(!(!(!C))))))))))))))))",
            "(->,C,(->,(->,B,(->,(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),B),(->,(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),(!B)),(!(!(!(!(!(!(!(!(!(!(!C)))))))))))))),(->,B,(->,(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),(!B)),(!(!(!(!(!(!(!(!(!(!(!C)))))))))))))))",
            "(->,(->,C,(->,B,(->,(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),B),(->,(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),(!B)),(!(!(!(!(!(!(!(!(!(!(!C))))))))))))))),(->,(->,C,(->,(->,B,(->,(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),B),(->,(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),(!B)),(!(!(!(!(!(!(!(!(!(!(!C)))))))))))))),(->,B,(->,(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),(!B)),(!(!(!(!(!(!(!(!(!(!(!C))))))))))))))),(->,C,(->,B,(->,(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),(!B)),(!(!(!(!(!(!(!(!(!(!(!C))))))))))))))))",
            "(->,(->,C,(->,(->,B,(->,(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),B),(->,(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),(!B)),(!(!(!(!(!(!(!(!(!(!(!C)))))))))))))),(->,B,(->,(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),(!B)),(!(!(!(!(!(!(!(!(!(!(!C))))))))))))))),(->,C,(->,B,(->,(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),(!B)),(!(!(!(!(!(!(!(!(!(!(!C)))))))))))))))",
            "(->,C,(->,B,(->,(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),(!B)),(!(!(!(!(!(!(!(!(!(!(!C))))))))))))))",
            "(->,(->,B,(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),(!B))),(->,(->,B,(->,(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),(!B)),(!(!(!(!(!(!(!(!(!(!(!C))))))))))))),(->,B,(!(!(!(!(!(!(!(!(!(!(!C))))))))))))))",
            "(->,(->,(->,B,(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),(!B))),(->,(->,B,(->,(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),(!B)),(!(!(!(!(!(!(!(!(!(!(!C))))))))))))),(->,B,(!(!(!(!(!(!(!(!(!(!(!C)))))))))))))),(->,C,(->,(->,B,(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),(!B))),(->,(->,B,(->,(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),(!B)),(!(!(!(!(!(!(!(!(!(!(!C))))))))))))),(->,B,(!(!(!(!(!(!(!(!(!(!(!C))))))))))))))))",
            "(->,(->,B,(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),(!B))),(->,(->,B,(->,(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),(!B)),(!(!(!(!(!(!(!(!(!(!(!C))))))))))))),(->,B,(!(!(!(!(!(!(!(!(!(!(!C))))))))))))))",
            "(->,C,(->,(->,B,(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),(!B))),(->,(->,B,(->,(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),(!B)),(!(!(!(!(!(!(!(!(!(!(!C))))))))))))),(->,B,(!(!(!(!(!(!(!(!(!(!(!C)))))))))))))))",
            "(->,(->,C,(->,B,(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),(!B)))),(->,(->,C,(->,(->,B,(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),(!B))),(->,(->,B,(->,(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),(!B)),(!(!(!(!(!(!(!(!(!(!(!C))))))))))))),(->,B,(!(!(!(!(!(!(!(!(!(!(!C))))))))))))))),(->,C,(->,(->,B,(->,(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),(!B)),(!(!(!(!(!(!(!(!(!(!(!C))))))))))))),(->,B,(!(!(!(!(!(!(!(!(!(!(!C))))))))))))))))",
            "(->,(->,C,(->,(->,B,(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),(!B))),(->,(->,B,(->,(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),(!B)),(!(!(!(!(!(!(!(!(!(!(!C))))))))))))),(->,B,(!(!(!(!(!(!(!(!(!(!(!C))))))))))))))),(->,C,(->,(->,B,(->,(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),(!B)),(!(!(!(!(!(!(!(!(!(!(!C))))))))))))),(->,B,(!(!(!(!(!(!(!(!(!(!(!C)))))))))))))))",
            "(->,C,(->,(->,B,(->,(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),(!B)),(!(!(!(!(!(!(!(!(!(!(!C))))))))))))),(->,B,(!(!(!(!(!(!(!(!(!(!(!C))))))))))))))",
            "(->,(->,C,(->,B,(->,(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),(!B)),(!(!(!(!(!(!(!(!(!(!(!C)))))))))))))),(->,(->,C,(->,(->,B,(->,(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),(!B)),(!(!(!(!(!(!(!(!(!(!(!C))))))))))))),(->,B,(!(!(!(!(!(!(!(!(!(!(!C)))))))))))))),(->,C,(->,B,(!(!(!(!(!(!(!(!(!(!(!C)))))))))))))))",
            "(->,(->,C,(->,(->,B,(->,(->,(!(!(!(!(!(!(!(!(!(!C)))))))))),(!B)),(!(!(!(!(!(!(!(!(!(!(!C))))))))))))),(->,B,(!(!(!(!(!(!(!(!(!(!(!C)))))))))))))),(->,C,(->,B,(!(!(!(!(!(!(!(!(!(!(!C))))))))))))))",
            "(->,C,(->,B,(!(!(!(!(!(!(!(!(!(!(!C)))))))))))))",
            "(->,(->,(!(!(!(!(!(!(!(!(!(!(!C))))))))))),(!(!(!(!(!(!(!(!(!C)))))))))),(->,B,(->,(!(!(!(!(!(!(!(!(!(!(!C))))))))))),(!(!(!(!(!(!(!(!(!C))))))))))))",
            "(->,(->,(->,(!(!(!(!(!(!(!(!(!(!(!C))))))))))),(!(!(!(!(!(!(!(!(!C)))))))))),(->,B,(->,(!(!(!(!(!(!(!(!(!(!(!C))))))))))),(!(!(!(!(!(!(!(!(!C)))))))))))),(->,C,(->,(->,(!(!(!(!(!(!(!(!(!(!(!C))))))))))),(!(!(!(!(!(!(!(!(!C)))))))))),(->,B,(->,(!(!(!(!(!(!(!(!(!(!(!C))))))))))),(!(!(!(!(!(!(!(!(!C))))))))))))))",
            "(->,(->,(!(!(!(!(!(!(!(!(!(!(!C))))))))))),(!(!(!(!(!(!(!(!(!C)))))))))),(->,B,(->,(!(!(!(!(!(!(!(!(!(!(!C))))))))))),(!(!(!(!(!(!(!(!(!C))))))))))))",
            "(->,C,(->,(->,(!(!(!(!(!(!(!(!(!(!(!C))))))))))),(!(!(!(!(!(!(!(!(!C)))))))))),(->,B,(->,(!(!(!(!(!(!(!(!(!(!(!C))))))))))),(!(!(!(!(!(!(!(!(!C)))))))))))))",
            "(->,(!(!(!(!(!(!(!(!(!(!(!C))))))))))),(!(!(!(!(!(!(!(!(!C))))))))))",
            "(->,(->,(!(!(!(!(!(!(!(!(!(!(!C))))))))))),(!(!(!(!(!(!(!(!(!C)))))))))),(->,C,(->,(!(!(!(!(!(!(!(!(!(!(!C))))))))))),(!(!(!(!(!(!(!(!(!C))))))))))))",
            "(->,(!(!(!(!(!(!(!(!(!(!(!C))))))))))),(!(!(!(!(!(!(!(!(!C))))))))))",
            "(->,C,(->,(!(!(!(!(!(!(!(!(!(!(!C))))))))))),(!(!(!(!(!(!(!(!(!C)))))))))))",
            "(->,(->,C,(->,(!(!(!(!(!(!(!(!(!(!(!C))))))))))),(!(!(!(!(!(!(!(!(!C))))))))))),(->,(->,C,(->,(->,(!(!(!(!(!(!(!(!(!(!(!C))))))))))),(!(!(!(!(!(!(!(!(!C)))))))))),(->,B,(->,(!(!(!(!(!(!(!(!(!(!(!C))))))))))),(!(!(!(!(!(!(!(!(!C))))))))))))),(->,C,(->,B,(->,(!(!(!(!(!(!(!(!(!(!(!C))))))))))),(!(!(!(!(!(!(!(!(!C))))))))))))))",
            "(->,(->,C,(->,(->,(!(!(!(!(!(!(!(!(!(!(!C))))))))))),(!(!(!(!(!(!(!(!(!C)))))))))),(->,B,(->,(!(!(!(!(!(!(!(!(!(!(!C))))))))))),(!(!(!(!(!(!(!(!(!C))))))))))))),(->,C,(->,B,(->,(!(!(!(!(!(!(!(!(!(!(!C))))))))))),(!(!(!(!(!(!(!(!(!C)))))))))))))",
            "(->,C,(->,B,(->,(!(!(!(!(!(!(!(!(!(!(!C))))))))))),(!(!(!(!(!(!(!(!(!C))))))))))))",
            "(->,(->,B,(!(!(!(!(!(!(!(!(!(!(!C)))))))))))),(->,(->,B,(->,(!(!(!(!(!(!(!(!(!(!(!C))))))))))),(!(!(!(!(!(!(!(!(!C))))))))))),(->,B,(!(!(!(!(!(!(!(!(!C))))))))))))",
            "(->,(->,(->,B,(!(!(!(!(!(!(!(!(!(!(!C)))))))))))),(->,(->,B,(->,(!(!(!(!(!(!(!(!(!(!(!C))))))))))),(!(!(!(!(!(!(!(!(!C))))))))))),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(->,C,(->,(->,B,(!(!(!(!(!(!(!(!(!(!(!C)))))))))))),(->,(->,B,(->,(!(!(!(!(!(!(!(!(!(!(!C))))))))))),(!(!(!(!(!(!(!(!(!C))))))))))),(->,B,(!(!(!(!(!(!(!(!(!C))))))))))))))",
            "(->,(->,B,(!(!(!(!(!(!(!(!(!(!(!C)))))))))))),(->,(->,B,(->,(!(!(!(!(!(!(!(!(!(!(!C))))))))))),(!(!(!(!(!(!(!(!(!C))))))))))),(->,B,(!(!(!(!(!(!(!(!(!C))))))))))))",
            "(->,C,(->,(->,B,(!(!(!(!(!(!(!(!(!(!(!C)))))))))))),(->,(->,B,(->,(!(!(!(!(!(!(!(!(!(!(!C))))))))))),(!(!(!(!(!(!(!(!(!C))))))))))),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))))",
            "(->,(->,C,(->,B,(!(!(!(!(!(!(!(!(!(!(!C))))))))))))),(->,(->,C,(->,(->,B,(!(!(!(!(!(!(!(!(!(!(!C)))))))))))),(->,(->,B,(->,(!(!(!(!(!(!(!(!(!(!(!C))))))))))),(!(!(!(!(!(!(!(!(!C))))))))))),(->,B,(!(!(!(!(!(!(!(!(!C))))))))))))),(->,C,(->,(->,B,(->,(!(!(!(!(!(!(!(!(!(!(!C))))))))))),(!(!(!(!(!(!(!(!(!C))))))))))),(->,B,(!(!(!(!(!(!(!(!(!C))))))))))))))",
            "(->,(->,C,(->,(->,B,(!(!(!(!(!(!(!(!(!(!(!C)))))))))))),(->,(->,B,(->,(!(!(!(!(!(!(!(!(!(!(!C))))))))))),(!(!(!(!(!(!(!(!(!C))))))))))),(->,B,(!(!(!(!(!(!(!(!(!C))))))))))))),(->,C,(->,(->,B,(->,(!(!(!(!(!(!(!(!(!(!(!C))))))))))),(!(!(!(!(!(!(!(!(!C))))))))))),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))))",
            "(->,C,(->,(->,B,(->,(!(!(!(!(!(!(!(!(!(!(!C))))))))))),(!(!(!(!(!(!(!(!(!C))))))))))),(->,B,(!(!(!(!(!(!(!(!(!C))))))))))))",
            "(->,(->,C,(->,B,(->,(!(!(!(!(!(!(!(!(!(!(!C))))))))))),(!(!(!(!(!(!(!(!(!C)))))))))))),(->,(->,C,(->,(->,B,(->,(!(!(!(!(!(!(!(!(!(!(!C))))))))))),(!(!(!(!(!(!(!(!(!C))))))))))),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(->,C,(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))))",
            "(->,(->,C,(->,(->,B,(->,(!(!(!(!(!(!(!(!(!(!(!C))))))))))),(!(!(!(!(!(!(!(!(!C))))))))))),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(->,C,(->,B,(!(!(!(!(!(!(!(!(!C))))))))))))",
            "(->,C,(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))",
            "(->,(->,B,(!(!(!(!(!(!(!(!(!C)))))))))),(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C))))))))))))",
            "(->,(->,(->,B,(!(!(!(!(!(!(!(!(!C)))))))))),(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(->,C,(->,(->,B,(!(!(!(!(!(!(!(!(!C)))))))))),(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C))))))))))))))",
            "(->,(->,B,(!(!(!(!(!(!(!(!(!C)))))))))),(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C))))))))))))",
            "(->,C,(->,(->,B,(!(!(!(!(!(!(!(!(!C)))))))))),(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))))",
            "(->,C,(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))",
            "(->,(->,C,(->,B,(!(!(!(!(!(!(!(!(!C))))))))))),(->,(->,C,(->,(->,B,(!(!(!(!(!(!(!(!(!C)))))))))),(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C))))))))))))),(->,C,(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C))))))))))))))",
            "(->,(->,C,(->,(->,B,(!(!(!(!(!(!(!(!(!C)))))))))),(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C))))))))))))),(->,C,(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))))",
            "(->,C,(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C))))))))))))",
            "(->,C,(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C))))))))))))",
            "(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(->,(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C))))))))))))),(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C))))))))))))))",
            "(->,(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(->,(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C))))))))))))),(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))))),(->,C,(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(->,(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C))))))))))))),(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C))))))))))))))))",
            "(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(->,(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C))))))))))))),(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C))))))))))))))",
            "(->,C,(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(->,(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C))))))))))))),(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))))))",
            "(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C))))))))))))))",
            "(->,(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))))),(->,C,(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C))))))))))))))))",
            "(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C))))))))))))))",
            "(->,C,(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))))))",
            "(->,(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))))),(->,(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(->,(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C))))))))))))),(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))))),(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))))))",

            "(->,(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))))),(->,(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(->,(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C))))))))))))),(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))))),(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))))))",



            "(->,C,(->,(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(->,(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C))))))))))))),(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))))),(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))))))",

            "(->,(->,C,(->,(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(->,(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C))))))))))))),(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))))),(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C))))))))))))))),(->,C,(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))))))",
            "(->,C,(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C))))))))))))))",
            "(->,(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C))))))))))),(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))))",
            "(->,(->,(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C))))))))))),(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C))))))))))))),(->,C,(->,(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C))))))))))),(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))))))",
            "(->,(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C))))))))))),(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))))",
            "(->,C,(->,(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C))))))))))),(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C))))))))))))))",
            "(->,(->,C,(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(->,(->,C,(->,(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C))))))))))),(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))))),(->,C,(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))))))",
            "(->,(->,C,(->,(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C))))))))))),(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))))),(->,C,(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C))))))))))))))",
            "(->,C,(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))))",
            "(->,(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(->,(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C))))))))))))),(!(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))))))",

            "(->,(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(->,(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C))))))))))))),(!(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))))))",
            "(->,C,(->,(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(->,(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C))))))))))))),(!(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C))))))))))))))))",

            "(->,(->,C,(->,(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(->,(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C))))))))))))),(!(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))))))),(->,C,(->,(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C))))))))))))),(!(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C))))))))))))))))",
            "(->,C,(->,(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C))))))))))))),(!(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))))))",
            "(->,(->,C,(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))))),(->,(->,C,(->,(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C))))))))))))),(!(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C))))))))))))))),(->,C,(!(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C))))))))))))))))",
            "(->,(->,C,(->,(->,(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))),(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C))))))))))))),(!(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C))))))))))))))),(->,C,(!(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))))))",
            "(->,C,(!(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C))))))))))))))",
            "(->,C,(!(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C))))))))))))))",
            "(->,(!C),(!(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C))))))))))))))",
            "(->,(->,C,(!(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))))),(->,(->,(!C),(!(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))))),(->,(|,C,(!C)),(!(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C))))))))))))))))",
            "(->,(->,(!C),(!(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))))),(->,(|,C,(!C)),(!(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))))))",
            "(->,(|,C,(!C)),(!(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C))))))))))))))",
            "(->,C,(|,C,(!C)))",
            "(->,(!C),(|,C,(!C)))",
            "(->,(->,C,(|,C,(!C))),(->,(->,C,(!(|,C,(!C)))),(!C)))",
            "(->,(->,(->,C,(|,C,(!C))),(->,(->,C,(!(|,C,(!C)))),(!C))),(->,(->,C,(|,C,(!C))),(->,(->,C,(|,C,(!C))),(->,(->,C,(!(|,C,(!C)))),(!C)))))",
            "(->,(->,C,(|,C,(!C))),(->,(->,C,(|,C,(!C))),(->,(->,C,(!(|,C,(!C)))),(!C))))",
            "(->,(->,(->,C,(|,C,(!C))),(->,(->,C,(!(|,C,(!C)))),(!C))),(->,(!(|,C,(!C))),(->,(->,C,(|,C,(!C))),(->,(->,C,(!(|,C,(!C)))),(!C)))))",
            "(->,(->,(->,(->,C,(|,C,(!C))),(->,(->,C,(!(|,C,(!C)))),(!C))),(->,(!(|,C,(!C))),(->,(->,C,(|,C,(!C))),(->,(->,C,(!(|,C,(!C)))),(!C))))),(->,(->,C,(|,C,(!C))),(->,(->,(->,C,(|,C,(!C))),(->,(->,C,(!(|,C,(!C)))),(!C))),(->,(!(|,C,(!C))),(->,(->,C,(|,C,(!C))),(->,(->,C,(!(|,C,(!C)))),(!C)))))))",
            "(->,(->,C,(|,C,(!C))),(->,(->,(->,C,(|,C,(!C))),(->,(->,C,(!(|,C,(!C)))),(!C))),(->,(!(|,C,(!C))),(->,(->,C,(|,C,(!C))),(->,(->,C,(!(|,C,(!C)))),(!C))))))",
            "(->,(->,(->,C,(|,C,(!C))),(->,(->,C,(|,C,(!C))),(->,(->,C,(!(|,C,(!C)))),(!C)))),(->,(->,(->,C,(|,C,(!C))),(->,(->,(->,C,(|,C,(!C))),(->,(->,C,(!(|,C,(!C)))),(!C))),(->,(!(|,C,(!C))),(->,(->,C,(|,C,(!C))),(->,(->,C,(!(|,C,(!C)))),(!C)))))),(->,(->,C,(|,C,(!C))),(->,(!(|,C,(!C))),(->,(->,C,(|,C,(!C))),(->,(->,C,(!(|,C,(!C)))),(!C)))))))",
            "(->,(->,(->,C,(|,C,(!C))),(->,(->,(->,C,(|,C,(!C))),(->,(->,C,(!(|,C,(!C)))),(!C))),(->,(!(|,C,(!C))),(->,(->,C,(|,C,(!C))),(->,(->,C,(!(|,C,(!C)))),(!C)))))),(->,(->,C,(|,C,(!C))),(->,(!(|,C,(!C))),(->,(->,C,(|,C,(!C))),(->,(->,C,(!(|,C,(!C)))),(!C))))))",
            "(->,(->,C,(|,C,(!C))),(->,(!(|,C,(!C))),(->,(->,C,(|,C,(!C))),(->,(->,C,(!(|,C,(!C)))),(!C)))))",
            "(->,(->,C,(|,C,(!C))),(->,(!(|,C,(!C))),(->,C,(|,C,(!C)))))",
            "(->,(->,(!(|,C,(!C))),(->,C,(|,C,(!C)))),(->,(->,(!(|,C,(!C))),(->,(->,C,(|,C,(!C))),(->,(->,C,(!(|,C,(!C)))),(!C)))),(->,(!(|,C,(!C))),(->,(->,C,(!(|,C,(!C)))),(!C)))))",
            "(->,(->,(->,(!(|,C,(!C))),(->,C,(|,C,(!C)))),(->,(->,(!(|,C,(!C))),(->,(->,C,(|,C,(!C))),(->,(->,C,(!(|,C,(!C)))),(!C)))),(->,(!(|,C,(!C))),(->,(->,C,(!(|,C,(!C)))),(!C))))),(->,(->,C,(|,C,(!C))),(->,(->,(!(|,C,(!C))),(->,C,(|,C,(!C)))),(->,(->,(!(|,C,(!C))),(->,(->,C,(|,C,(!C))),(->,(->,C,(!(|,C,(!C)))),(!C)))),(->,(!(|,C,(!C))),(->,(->,C,(!(|,C,(!C)))),(!C)))))))",
            "(->,(->,C,(|,C,(!C))),(->,(->,(!(|,C,(!C))),(->,C,(|,C,(!C)))),(->,(->,(!(|,C,(!C))),(->,(->,C,(|,C,(!C))),(->,(->,C,(!(|,C,(!C)))),(!C)))),(->,(!(|,C,(!C))),(->,(->,C,(!(|,C,(!C)))),(!C))))))",
            "(->,(->,(->,C,(|,C,(!C))),(->,(!(|,C,(!C))),(->,C,(|,C,(!C))))),(->,(->,(->,C,(|,C,(!C))),(->,(->,(!(|,C,(!C))),(->,C,(|,C,(!C)))),(->,(->,(!(|,C,(!C))),(->,(->,C,(|,C,(!C))),(->,(->,C,(!(|,C,(!C)))),(!C)))),(->,(!(|,C,(!C))),(->,(->,C,(!(|,C,(!C)))),(!C)))))),(->,(->,C,(|,C,(!C))),(->,(->,(!(|,C,(!C))),(->,(->,C,(|,C,(!C))),(->,(->,C,(!(|,C,(!C)))),(!C)))),(->,(!(|,C,(!C))),(->,(->,C,(!(|,C,(!C)))),(!C)))))))",
            "(->,(->,(->,C,(|,C,(!C))),(->,(->,(!(|,C,(!C))),(->,C,(|,C,(!C)))),(->,(->,(!(|,C,(!C))),(->,(->,C,(|,C,(!C))),(->,(->,C,(!(|,C,(!C)))),(!C)))),(->,(!(|,C,(!C))),(->,(->,C,(!(|,C,(!C)))),(!C)))))),(->,(->,C,(|,C,(!C))),(->,(->,(!(|,C,(!C))),(->,(->,C,(|,C,(!C))),(->,(->,C,(!(|,C,(!C)))),(!C)))),(->,(!(|,C,(!C))),(->,(->,C,(!(|,C,(!C)))),(!C))))))",
            "(->,(->,C,(|,C,(!C))),(->,(->,(!(|,C,(!C))),(->,(->,C,(|,C,(!C))),(->,(->,C,(!(|,C,(!C)))),(!C)))),(->,(!(|,C,(!C))),(->,(->,C,(!(|,C,(!C)))),(!C)))))",
            "(->,(->,(->,C,(|,C,(!C))),(->,(!(|,C,(!C))),(->,(->,C,(|,C,(!C))),(->,(->,C,(!(|,C,(!C)))),(!C))))),(->,(->,(->,C,(|,C,(!C))),(->,(->,(!(|,C,(!C))),(->,(->,C,(|,C,(!C))),(->,(->,C,(!(|,C,(!C)))),(!C)))),(->,(!(|,C,(!C))),(->,(->,C,(!(|,C,(!C)))),(!C))))),(->,(->,C,(|,C,(!C))),(->,(!(|,C,(!C))),(->,(->,C,(!(|,C,(!C)))),(!C))))))",
            "(->,(->,(->,C,(|,C,(!C))),(->,(->,(!(|,C,(!C))),(->,(->,C,(|,C,(!C))),(->,(->,C,(!(|,C,(!C)))),(!C)))),(->,(!(|,C,(!C))),(->,(->,C,(!(|,C,(!C)))),(!C))))),(->,(->,C,(|,C,(!C))),(->,(!(|,C,(!C))),(->,(->,C,(!(|,C,(!C)))),(!C)))))",
            "(->,(->,C,(|,C,(!C))),(->,(!(|,C,(!C))),(->,(->,C,(!(|,C,(!C)))),(!C))))",
            "(->,(!(|,C,(!C))),(->,C,(!(|,C,(!C)))))",
            "(->,(->,(!(|,C,(!C))),(->,C,(!(|,C,(!C))))),(->,(->,C,(|,C,(!C))),(->,(!(|,C,(!C))),(->,C,(!(|,C,(!C)))))))",
            "(->,(->,C,(|,C,(!C))),(->,(!(|,C,(!C))),(->,C,(!(|,C,(!C))))))",
            "(->,(->,(!(|,C,(!C))),(->,C,(!(|,C,(!C))))),(->,(->,(!(|,C,(!C))),(->,(->,C,(!(|,C,(!C)))),(!C))),(->,(!(|,C,(!C))),(!C))))",
            "(->,(->,(->,(!(|,C,(!C))),(->,C,(!(|,C,(!C))))),(->,(->,(!(|,C,(!C))),(->,(->,C,(!(|,C,(!C)))),(!C))),(->,(!(|,C,(!C))),(!C)))),(->,(->,C,(|,C,(!C))),(->,(->,(!(|,C,(!C))),(->,C,(!(|,C,(!C))))),(->,(->,(!(|,C,(!C))),(->,(->,C,(!(|,C,(!C)))),(!C))),(->,(!(|,C,(!C))),(!C))))))",
            "(->,(->,C,(|,C,(!C))),(->,(->,(!(|,C,(!C))),(->,C,(!(|,C,(!C))))),(->,(->,(!(|,C,(!C))),(->,(->,C,(!(|,C,(!C)))),(!C))),(->,(!(|,C,(!C))),(!C)))))",
            "(->,(->,(->,C,(|,C,(!C))),(->,(!(|,C,(!C))),(->,C,(!(|,C,(!C)))))),(->,(->,(->,C,(|,C,(!C))),(->,(->,(!(|,C,(!C))),(->,C,(!(|,C,(!C))))),(->,(->,(!(|,C,(!C))),(->,(->,C,(!(|,C,(!C)))),(!C))),(->,(!(|,C,(!C))),(!C))))),(->,(->,C,(|,C,(!C))),(->,(->,(!(|,C,(!C))),(->,(->,C,(!(|,C,(!C)))),(!C))),(->,(!(|,C,(!C))),(!C))))))",
            "(->,(->,(->,C,(|,C,(!C))),(->,(->,(!(|,C,(!C))),(->,C,(!(|,C,(!C))))),(->,(->,(!(|,C,(!C))),(->,(->,C,(!(|,C,(!C)))),(!C))),(->,(!(|,C,(!C))),(!C))))),(->,(->,C,(|,C,(!C))),(->,(->,(!(|,C,(!C))),(->,(->,C,(!(|,C,(!C)))),(!C))),(->,(!(|,C,(!C))),(!C)))))",
            "(->,(->,C,(|,C,(!C))),(->,(->,(!(|,C,(!C))),(->,(->,C,(!(|,C,(!C)))),(!C))),(->,(!(|,C,(!C))),(!C))))",
            "(->,(->,(->,C,(|,C,(!C))),(->,(!(|,C,(!C))),(->,(->,C,(!(|,C,(!C)))),(!C)))),(->,(->,(->,C,(|,C,(!C))),(->,(->,(!(|,C,(!C))),(->,(->,C,(!(|,C,(!C)))),(!C))),(->,(!(|,C,(!C))),(!C)))),(->,(->,C,(|,C,(!C))),(->,(!(|,C,(!C))),(!C)))))",
            "(->,(->,(->,C,(|,C,(!C))),(->,(->,(!(|,C,(!C))),(->,(->,C,(!(|,C,(!C)))),(!C))),(->,(!(|,C,(!C))),(!C)))),(->,(->,C,(|,C,(!C))),(->,(!(|,C,(!C))),(!C))))",
            "(->,(->,C,(|,C,(!C))),(->,(!(|,C,(!C))),(!C)))",
            "(->,(->,(!C),(|,C,(!C))),(->,(->,(!C),(!(|,C,(!C)))),(!(!C))))",
            "(->,(->,(->,(!C),(|,C,(!C))),(->,(->,(!C),(!(|,C,(!C)))),(!(!C)))),(->,(->,(!C),(|,C,(!C))),(->,(->,(!C),(|,C,(!C))),(->,(->,(!C),(!(|,C,(!C)))),(!(!C))))))",
            "(->,(->,(!C),(|,C,(!C))),(->,(->,(!C),(|,C,(!C))),(->,(->,(!C),(!(|,C,(!C)))),(!(!C)))))",
            "(->,(->,(->,(!C),(|,C,(!C))),(->,(->,(!C),(!(|,C,(!C)))),(!(!C)))),(->,(!(|,C,(!C))),(->,(->,(!C),(|,C,(!C))),(->,(->,(!C),(!(|,C,(!C)))),(!(!C))))))",
            "(->,(->,(->,(->,(!C),(|,C,(!C))),(->,(->,(!C),(!(|,C,(!C)))),(!(!C)))),(->,(!(|,C,(!C))),(->,(->,(!C),(|,C,(!C))),(->,(->,(!C),(!(|,C,(!C)))),(!(!C)))))),(->,(->,(!C),(|,C,(!C))),(->,(->,(->,(!C),(|,C,(!C))),(->,(->,(!C),(!(|,C,(!C)))),(!(!C)))),(->,(!(|,C,(!C))),(->,(->,(!C),(|,C,(!C))),(->,(->,(!C),(!(|,C,(!C)))),(!(!C))))))))",
            "(->,(->,(!C),(|,C,(!C))),(->,(->,(->,(!C),(|,C,(!C))),(->,(->,(!C),(!(|,C,(!C)))),(!(!C)))),(->,(!(|,C,(!C))),(->,(->,(!C),(|,C,(!C))),(->,(->,(!C),(!(|,C,(!C)))),(!(!C)))))))",
            "(->,(->,(->,(!C),(|,C,(!C))),(->,(->,(!C),(|,C,(!C))),(->,(->,(!C),(!(|,C,(!C)))),(!(!C))))),(->,(->,(->,(!C),(|,C,(!C))),(->,(->,(->,(!C),(|,C,(!C))),(->,(->,(!C),(!(|,C,(!C)))),(!(!C)))),(->,(!(|,C,(!C))),(->,(->,(!C),(|,C,(!C))),(->,(->,(!C),(!(|,C,(!C)))),(!(!C))))))),(->,(->,(!C),(|,C,(!C))),(->,(!(|,C,(!C))),(->,(->,(!C),(|,C,(!C))),(->,(->,(!C),(!(|,C,(!C)))),(!(!C))))))))",
            "(->,(->,(->,(!C),(|,C,(!C))),(->,(->,(->,(!C),(|,C,(!C))),(->,(->,(!C),(!(|,C,(!C)))),(!(!C)))),(->,(!(|,C,(!C))),(->,(->,(!C),(|,C,(!C))),(->,(->,(!C),(!(|,C,(!C)))),(!(!C))))))),(->,(->,(!C),(|,C,(!C))),(->,(!(|,C,(!C))),(->,(->,(!C),(|,C,(!C))),(->,(->,(!C),(!(|,C,(!C)))),(!(!C)))))))",
            "(->,(->,(!C),(|,C,(!C))),(->,(!(|,C,(!C))),(->,(->,(!C),(|,C,(!C))),(->,(->,(!C),(!(|,C,(!C)))),(!(!C))))))",
            "(->,(->,(!C),(|,C,(!C))),(->,(!(|,C,(!C))),(->,(!C),(|,C,(!C)))))",
            "(->,(->,(!(|,C,(!C))),(->,(!C),(|,C,(!C)))),(->,(->,(!(|,C,(!C))),(->,(->,(!C),(|,C,(!C))),(->,(->,(!C),(!(|,C,(!C)))),(!(!C))))),(->,(!(|,C,(!C))),(->,(->,(!C),(!(|,C,(!C)))),(!(!C))))))",
            "(->,(->,(->,(!(|,C,(!C))),(->,(!C),(|,C,(!C)))),(->,(->,(!(|,C,(!C))),(->,(->,(!C),(|,C,(!C))),(->,(->,(!C),(!(|,C,(!C)))),(!(!C))))),(->,(!(|,C,(!C))),(->,(->,(!C),(!(|,C,(!C)))),(!(!C)))))),(->,(->,(!C),(|,C,(!C))),(->,(->,(!(|,C,(!C))),(->,(!C),(|,C,(!C)))),(->,(->,(!(|,C,(!C))),(->,(->,(!C),(|,C,(!C))),(->,(->,(!C),(!(|,C,(!C)))),(!(!C))))),(->,(!(|,C,(!C))),(->,(->,(!C),(!(|,C,(!C)))),(!(!C))))))))",
            "(->,(->,(!C),(|,C,(!C))),(->,(->,(!(|,C,(!C))),(->,(!C),(|,C,(!C)))),(->,(->,(!(|,C,(!C))),(->,(->,(!C),(|,C,(!C))),(->,(->,(!C),(!(|,C,(!C)))),(!(!C))))),(->,(!(|,C,(!C))),(->,(->,(!C),(!(|,C,(!C)))),(!(!C)))))))",
            "(->,(->,(->,(!C),(|,C,(!C))),(->,(!(|,C,(!C))),(->,(!C),(|,C,(!C))))),(->,(->,(->,(!C),(|,C,(!C))),(->,(->,(!(|,C,(!C))),(->,(!C),(|,C,(!C)))),(->,(->,(!(|,C,(!C))),(->,(->,(!C),(|,C,(!C))),(->,(->,(!C),(!(|,C,(!C)))),(!(!C))))),(->,(!(|,C,(!C))),(->,(->,(!C),(!(|,C,(!C)))),(!(!C))))))),(->,(->,(!C),(|,C,(!C))),(->,(->,(!(|,C,(!C))),(->,(->,(!C),(|,C,(!C))),(->,(->,(!C),(!(|,C,(!C)))),(!(!C))))),(->,(!(|,C,(!C))),(->,(->,(!C),(!(|,C,(!C)))),(!(!C))))))))",
            "(->,(->,(->,(!C),(|,C,(!C))),(->,(->,(!(|,C,(!C))),(->,(!C),(|,C,(!C)))),(->,(->,(!(|,C,(!C))),(->,(->,(!C),(|,C,(!C))),(->,(->,(!C),(!(|,C,(!C)))),(!(!C))))),(->,(!(|,C,(!C))),(->,(->,(!C),(!(|,C,(!C)))),(!(!C))))))),(->,(->,(!C),(|,C,(!C))),(->,(->,(!(|,C,(!C))),(->,(->,(!C),(|,C,(!C))),(->,(->,(!C),(!(|,C,(!C)))),(!(!C))))),(->,(!(|,C,(!C))),(->,(->,(!C),(!(|,C,(!C)))),(!(!C)))))))",
            "(->,(->,(!C),(|,C,(!C))),(->,(->,(!(|,C,(!C))),(->,(->,(!C),(|,C,(!C))),(->,(->,(!C),(!(|,C,(!C)))),(!(!C))))),(->,(!(|,C,(!C))),(->,(->,(!C),(!(|,C,(!C)))),(!(!C))))))",
            "(->,(->,(->,(!C),(|,C,(!C))),(->,(!(|,C,(!C))),(->,(->,(!C),(|,C,(!C))),(->,(->,(!C),(!(|,C,(!C)))),(!(!C)))))),(->,(->,(->,(!C),(|,C,(!C))),(->,(->,(!(|,C,(!C))),(->,(->,(!C),(|,C,(!C))),(->,(->,(!C),(!(|,C,(!C)))),(!(!C))))),(->,(!(|,C,(!C))),(->,(->,(!C),(!(|,C,(!C)))),(!(!C)))))),(->,(->,(!C),(|,C,(!C))),(->,(!(|,C,(!C))),(->,(->,(!C),(!(|,C,(!C)))),(!(!C)))))))",
            "(->,(->,(->,(!C),(|,C,(!C))),(->,(->,(!(|,C,(!C))),(->,(->,(!C),(|,C,(!C))),(->,(->,(!C),(!(|,C,(!C)))),(!(!C))))),(->,(!(|,C,(!C))),(->,(->,(!C),(!(|,C,(!C)))),(!(!C)))))),(->,(->,(!C),(|,C,(!C))),(->,(!(|,C,(!C))),(->,(->,(!C),(!(|,C,(!C)))),(!(!C))))))",
            "(->,(->,(!C),(|,C,(!C))),(->,(!(|,C,(!C))),(->,(->,(!C),(!(|,C,(!C)))),(!(!C)))))",
            "(->,(!(|,C,(!C))),(->,(!C),(!(|,C,(!C)))))",
            "(->,(->,(!(|,C,(!C))),(->,(!C),(!(|,C,(!C))))),(->,(->,(!C),(|,C,(!C))),(->,(!(|,C,(!C))),(->,(!C),(!(|,C,(!C)))))))",
            "(->,(->,(!C),(|,C,(!C))),(->,(!(|,C,(!C))),(->,(!C),(!(|,C,(!C))))))",
            "(->,(->,(!(|,C,(!C))),(->,(!C),(!(|,C,(!C))))),(->,(->,(!(|,C,(!C))),(->,(->,(!C),(!(|,C,(!C)))),(!(!C)))),(->,(!(|,C,(!C))),(!(!C)))))",
            "(->,(->,(->,(!(|,C,(!C))),(->,(!C),(!(|,C,(!C))))),(->,(->,(!(|,C,(!C))),(->,(->,(!C),(!(|,C,(!C)))),(!(!C)))),(->,(!(|,C,(!C))),(!(!C))))),(->,(->,(!C),(|,C,(!C))),(->,(->,(!(|,C,(!C))),(->,(!C),(!(|,C,(!C))))),(->,(->,(!(|,C,(!C))),(->,(->,(!C),(!(|,C,(!C)))),(!(!C)))),(->,(!(|,C,(!C))),(!(!C)))))))",
            "(->,(->,(!C),(|,C,(!C))),(->,(->,(!(|,C,(!C))),(->,(!C),(!(|,C,(!C))))),(->,(->,(!(|,C,(!C))),(->,(->,(!C),(!(|,C,(!C)))),(!(!C)))),(->,(!(|,C,(!C))),(!(!C))))))",
            "(->,(->,(->,(!C),(|,C,(!C))),(->,(!(|,C,(!C))),(->,(!C),(!(|,C,(!C)))))),(->,(->,(->,(!C),(|,C,(!C))),(->,(->,(!(|,C,(!C))),(->,(!C),(!(|,C,(!C))))),(->,(->,(!(|,C,(!C))),(->,(->,(!C),(!(|,C,(!C)))),(!(!C)))),(->,(!(|,C,(!C))),(!(!C)))))),(->,(->,(!C),(|,C,(!C))),(->,(->,(!(|,C,(!C))),(->,(->,(!C),(!(|,C,(!C)))),(!(!C)))),(->,(!(|,C,(!C))),(!(!C)))))))",
            "(->,(->,(->,(!C),(|,C,(!C))),(->,(->,(!(|,C,(!C))),(->,(!C),(!(|,C,(!C))))),(->,(->,(!(|,C,(!C))),(->,(->,(!C),(!(|,C,(!C)))),(!(!C)))),(->,(!(|,C,(!C))),(!(!C)))))),(->,(->,(!C),(|,C,(!C))),(->,(->,(!(|,C,(!C))),(->,(->,(!C),(!(|,C,(!C)))),(!(!C)))),(->,(!(|,C,(!C))),(!(!C))))))",
            "(->,(->,(!C),(|,C,(!C))),(->,(->,(!(|,C,(!C))),(->,(->,(!C),(!(|,C,(!C)))),(!(!C)))),(->,(!(|,C,(!C))),(!(!C)))))",
            "(->,(->,(->,(!C),(|,C,(!C))),(->,(!(|,C,(!C))),(->,(->,(!C),(!(|,C,(!C)))),(!(!C))))),(->,(->,(->,(!C),(|,C,(!C))),(->,(->,(!(|,C,(!C))),(->,(->,(!C),(!(|,C,(!C)))),(!(!C)))),(->,(!(|,C,(!C))),(!(!C))))),(->,(->,(!C),(|,C,(!C))),(->,(!(|,C,(!C))),(!(!C))))))",
            "(->,(->,(->,(!C),(|,C,(!C))),(->,(->,(!(|,C,(!C))),(->,(->,(!C),(!(|,C,(!C)))),(!(!C)))),(->,(!(|,C,(!C))),(!(!C))))),(->,(->,(!C),(|,C,(!C))),(->,(!(|,C,(!C))),(!(!C)))))",
            "(->,(->,(!C),(|,C,(!C))),(->,(!(|,C,(!C))),(!(!C))))",
            "(->,(!(|,C,(!C))),(!C))",
            "(->,(!(|,C,(!C))),(!(!C)))",
            "(->,(->,(!(|,C,(!C))),(!C)),(->,(->,(!(|,C,(!C))),(!(!C))),(!(!(|,C,(!C))))))",
            "(->,(->,(!(|,C,(!C))),(!(!C))),(!(!(|,C,(!C)))))",
            "(!(!(|,C,(!C))))",
            "(->,(!(!(|,C,(!C)))),(|,C,(!C)))",
            "(|,C,(!C))",
            "(!(!(->,(!A),(->,B,(!(!(!(!(!(!(!(!(!C)))))))))))))",
    };
    int pos = 0;

    vector<expr> exprs;
    for (const auto &str : strs) {
        exprs.emplace_back(str, pos);
        pos = 0;
    }

    expr hyp("(!A)", pos);
    unordered_map<expr, int, Hash> hypo_map;
    pos = 0;
    expr hypo1("(!B)", pos);
//    pos = 0;
//    expr hypo2("(B)", pos);

    hypo_map[hypo1] = 1;
//    hypo_map[hypo2] = 2;
    cout << hyp.to_string() << " " << exprs[exprs.size() - 2].to_string() << endl;
    for (auto &h : hypo_map) {
        cout << "hypos: " << h.first.to_string() << endl;
    }
    auto ans = deduct(exprs, hyp, hypo_map);

    for (const auto &e : ans) {
        cout << e.to_string() << endl;
    }
}

void test2() {
    vector<string> strs = {
            "(->,A,B)",
            "(A)",
    };
    int pos = 0;

    vector<expr> exprs;
    for (const auto &str : strs) {
        exprs.emplace_back(str, pos);
        pos = 0;
    }

    vector<expr> ans;
    add_nota_notb_notor(exprs[0], exprs[1], ans);

    cout << ans.size() << "\n";
    for (const auto &e : ans) {
        cout << e.to_string() << endl;
    }
}

void test3(int n) {
    using namespace std::chrono;

    for (int i = 0; i < n; i++) {
        high_resolution_clock::time_point t1 = high_resolution_clock::now();
        cerr << i + 1 << " - ";
        test();

        high_resolution_clock::time_point t2 = high_resolution_clock::now();
        duration<double, std::milli> time_span = t2 - t1;
        std::cerr << "It took me " << time_span.count() << " milliseconds.";
        std::cerr << std::endl;
    }

}

int main() {
    init_axis();
    int pos = 0;
    getline(fin, fact_string);
    expr fact(fact_string, pos);
    fact.initVariables();

//    test();
//    test2();
//    test3(30);
//    return 0;

    vector<bool> vars = {1, 1, 1};
    if (!fact.eval(vars)) {
        fact_string = "(!" + fact_string + ")";
        pos = 0;
        fact = expr(fact_string, pos);
        vars = {0, 0, 0};
        if (!fact.eval(vars)) {
            cout << ":(" << endl;
            return 0;
        }

        prove(fact, true);
        return 0;
    }
    prove(fact, false);

    return 0;
}
